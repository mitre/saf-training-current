import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c,d as e,e as t,b as n,f as a}from"./app-WeARUK1X.js";const s={},d=e("h1",{id:"prepair-your-environment",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#prepair-your-environment","aria-hidden":"true"},"#"),t(" Prepair Your Environment")],-1),h=e("strong",null,"Download New Guidance:",-1),f={href:"https://public.cyber.mil/stigs/downloads/",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"<name>xccdf.xml",-1),p=e("li",null,[e("strong",null,"Create the InSpec Profile JSON File:"),t(" Clone or download the InSpec profile locally. Run the "),e("code",null,"inspec json"),t(" command to create the InSpec Profile JSON file to be used in the "),e("code",null,"saf generate delta"),t(" command.")],-1),m=a('<h2 id="delta-workflow-process" tabindex="-1"><a class="header-anchor" href="#delta-workflow-process" aria-hidden="true">#</a> Delta Workflow Process</h2><figure><img src="https://user-images.githubusercontent.com/13986875/228628448-ad6b9fd9-d165-4e65-95e2-a951031d19e2.png" alt="Delta Workflow Process" tabindex="0" loading="lazy"><figcaption>Delta Workflow Process Image</figcaption></figure><h2 id="using-delta" tabindex="-1"><a class="header-anchor" href="#using-delta" aria-hidden="true">#</a> Using Delta</h2><p>The SAF InSpec Delta workflow typically involves two phases, <code>preformatting</code> and <code>delta</code>.</p><p>Before starting, ensure you have the latest SAF-CLI, the InSpec Profile JSON file, and the updated guidance file.</p><ol><li><strong>Preformat the Source Profile:</strong> Before running the Delta command, preformat your source profile (usually the Patch Release profile) using the <code>saf generate update_controls4delta</code> command. This prepares the profile for the Delta process.</li><li><strong>Run the Delta Command:</strong> Execute <code>saf generate delta [arguments]</code> to start the Delta process.</li></ol><p>For more information on these commands, refer to the following documentation:</p>',7),g={href:"https://saf-cli.mitre.org/#delta-supporting-options",target:"_blank",rel:"noopener noreferrer"},_={href:"https://saf-cli.mitre.org/#delta",target:"_blank",rel:"noopener noreferrer"},b=a('<h2 id="scope-of-changes-by-delta" tabindex="-1"><a class="header-anchor" href="#scope-of-changes-by-delta" aria-hidden="true">#</a> Scope of Changes by Delta</h2><p>Delta focuses on specific modifications migrating the changes from the XCCDF Benchmark Rules to the Profiles controls, and updating the &#39;metadata&#39; of each of thosin the <code>control ID</code>, <code>title</code>, <code>default desc</code>, <code>check text</code>, and <code>fix text</code>, between the XCCDF Benchmark Rules and the Profile Controls.</p>',2),D=e("code",null,"inspec control",-1),w=e("code",null,"controls",-1),k={href:"https://saf-cli.mitre.org/#xccdf-benchmark-to-inspec-stub",target:"_blank",rel:"noopener noreferrer"},x=a('<p>It also adjusts the <code>tags</code> and introduces a <code>ref</code> between the <code>impact</code> and <code>tags</code>.</p><p>Delta does not modify the Ruby/InSpec code within the control, leaving it intact. Instead, it updates the &#39;control metadata&#39; using the information from the supplied XCCDF guidance document. This applies to &#39;matched controls&#39; between the XCCDF Guidance Document and the InSpec profile.</p><h3 id="further-inspec-delta-information-and-background" tabindex="-1"><a class="header-anchor" href="#further-inspec-delta-information-and-background" aria-hidden="true">#</a> Further InSpec Delta Information and Background</h3>',3),y={href:"https://github.com/mitre/saf/pull/485",target:"_blank",rel:"noopener noreferrer"},C=e("li",null,"Delta moves lines not labeled with 'desc' to the bottom, between tags and InSpec code.",-1),I=e("li",null,"Whether the controls are formatted to be 80 lines or not, Delta exhibits the same behavior with the extra text.",-1),S=e("li",null,"Parameterizing should be considered.",-1);function P(v,F){const o=l("ExternalLinkIcon");return i(),c("div",null,[d,e("ul",null,[e("li",null,[h,t(" Download the appropriate profile from the "),e("a",f,[t("DISA Document Library"),n(o)]),t(". Unzip the downloaded folder and identify the "),u,t(" file.")]),p]),m,e("ul",null,[e("li",null,[e("a",g,[t("update_controls4delta"),n(o)])]),e("li",null,[e("a",_,[t("saf generate delta"),n(o)])])]),b,e("p",null,[t("If the XCCDF Guidance Document introduces a new 'Rule' or "),D,t(" that is not in the current profile's "),w,t(" directory, Delta will add it to the controls directory, populating the metadata from the XCCDF Benchmark data, similar to the "),e("a",k,[t("xccdf-benchmark-to-inspec-stubs"),n(o)]),t(" tool.")]),x,e("ul",null,[e("li",null,[t("The original Delta branch can be found "),e("a",y,[t("here"),n(o)]),t(".")]),C,I,S])])}const R=r(s,[["render",P],["__file","25.html.vue"]]);export{R as default};
