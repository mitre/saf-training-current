import{_ as c}from"./TestDrivenDevelopment-05PE0ry4.js";import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as u,c as d,b as o,w as e,d as s,f as l,e as n}from"./app-WeARUK1X.js";const k={},m=l(`<h2 id="custom-resource-docker" tabindex="-1"><a class="header-anchor" href="#custom-resource-docker" aria-hidden="true">#</a> Custom Resource - Docker</h2><p>Now let&#39;s try a more complicated example. Let&#39;s say we want to create a resource that can parse a <code>docker-compose</code> file.</p><h3 id="create-new-profile-and-setup-docker-files" tabindex="-1"><a class="header-anchor" href="#create-new-profile-and-setup-docker-files" aria-hidden="true">#</a> Create new profile and setup Docker files</h3><p>First, we need a test target! Check out the <code>resources/docker-compose.yml</code> file in Codespaces for what we can test. It looks like this:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">workstation</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> workstation
    <span class="token key atrule">image</span><span class="token punctuation">:</span> learnchef/inspec_workstation
    <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> target
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/root
  <span class="token key atrule">target</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> learnchef/inspec_target
    <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will continue writing our controls to check against this docker file:</p>`,6),v=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,`inspec init profile docker-workstations
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n(` ─────────────────────────── InSpec Code Generator ─────────────────────────── 

Creating new profile at /workspaces/saf-training-lab-environment/docker-workstations
 • Creating `),s("span",{class:"token function"},"file"),n(` inspec.yml
 • Creating directory /workspaces/saf-training-lab-environment/docker-workstations/controls
 • Creating `),s("span",{class:"token function"},"file"),n(` controls/example.rb
 • Creating `),s("span",{class:"token function"},"file"),n(` README.md
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=l(`<h3 id="develop-controls-to-test-run-profile" tabindex="-1"><a class="header-anchor" href="#develop-controls-to-test-run-profile" aria-hidden="true">#</a> Develop controls to test/run profile</h3><p>Conceptually, we want to write tests with this profile that will check different settings in a docker-compose file. If you are not sure what the InSpec code looks like for a particular test, start by writing what conceptually you want to achieve, then modify it to be correct syntax. We can do that with the idea of checking a setting in a docker-compose file, which we know is a YAML file, as such:</p><p>In the <code>docker-workstations/controls/example.rb</code> file, write the control:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>describe yaml<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;file_name&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;setting&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should_not eq <span class="token string-literal"><span class="token string">&#39;value&#39;</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We test early and often. We know that the test we wrote is not complete, but we can see if we are on the right track. Remember that the command line output can help guide your development!</p>`,5),h=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),f=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML file_name
     ↺  Can't `),s("span",{class:"token function"},"find"),n(` file: file_name

Test Summary: `),s("span",{class:"token number"},"0"),n(" successful, "),s("span",{class:"token number"},"0"),n(" failures, "),s("span",{class:"token number"},"1"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),w=l(`<p>We need to replace the <code>file_name</code> above with the location of the <code>docker-compose.yml</code> file. We also need to change the <code>setting</code> to grab the tag we want to retrieve. Finally we need to change <code>value</code> with the actual value as shown in the docker compose file. You can write multiple expectation statements in the describe block.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>describe yaml<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/path/to/docker-compose.yml&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;workstation&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;image&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should eq <span class="token string-literal"><span class="token string">&#39;learnchef/inspec_workstation&#39;</span></span> <span class="token punctuation">}</span>
  its<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;workstation&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;volumes&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;.:/root&#39;</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now if we test this control using the following command we should see all the tests pass.</p>`,3),y=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),_=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /workspaces/saf-training-lab-environment/resources/docker-compose.yml
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"image"'),s("span",{class:"token punctuation"},"]"),n(" is expected to eq "),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"volumes"'),s("span",{class:"token punctuation"},"]"),n(" is expected to "),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`

Test Summary: `),s("span",{class:"token number"},"2"),n(" successful, "),s("span",{class:"token number"},"0"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),x=l(`<div class="hint-container caution"><p class="hint-container-title">If you received an error above! - Concept Check</p><p>If you saw this as your output:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Profile:   InSpec Profile <span class="token punctuation">(</span>docker-workstations<span class="token punctuation">)</span>
Version:   <span class="token number">0.1</span>.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /path/to/docker-compose.yml
     ↺  Can&#39;t <span class="token function">find</span> file: /path/to/docker-compose.yml

Test Summary: <span class="token number">0</span> successful, <span class="token number">0</span> failures, <span class="token number">1</span> skipped
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is because you did not give YOUR path to the docker-compose file. You need to replace the path in your <code>example.rb</code> file to be something like this:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>describe yaml<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/workspaces/saf-training-lab-environment/resources/docker-compose.yml&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;workstation&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;image&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should eq <span class="token string-literal"><span class="token string">&#39;learnchef/inspec_workstation&#39;</span></span> <span class="token punctuation">}</span>
  its<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;workstation&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;volumes&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;.:/root&#39;</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="rewrite-test-to-utilize-a-new-resource" tabindex="-1"><a class="header-anchor" href="#rewrite-test-to-utilize-a-new-resource" aria-hidden="true">#</a> Rewrite test to utilize a new resource</h3><p>Going back to the control, we will write it using a resource that doesn&#39;t exist called docker-compose-config that is going to take a path as a parameter.</p><details class="hint-container details"><summary>Test Driven Development</summary><p>Remember the idea of Test Driven Development (TDD), the red-green-clean cycle. This way of development is driven by the tests. In this way, you know when you have succeeded while developing something new! In other words, before writing a solution, first write the test (which will fail - red), so that you know exactly what the expectation should be and when you have achieved it. Then you can write the solution to make the test pass (green). Finally, clean up the solution to make it easy to read and efficient!<br><img src="`+c+'" alt="Test Driven Development" loading="lazy"></p></details>',4),C=s("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[s("pre",{class:"language-ruby"},[s("code",null,[n("describe yaml"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'/workspaces/saf-training-lab-environment/resources/docker-compose.yml'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"do"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'workstation'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'image'")]),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should eq "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'learnchef/inspec_workstation'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'workstation'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'volumes'")]),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should cmp "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'.:/root'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"end"),n(`

describe docker_compose_config`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'/workspaces/saf-training-lab-environment/resources/docker-compose.yml'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"do"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services.workstation.image'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should eq "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'learnchef/inspec_workstation'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services.workstation.volumes'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should cmp "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'.:/root'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"end"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),A=s("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[s("pre",{class:"language-ruby"},[s("code",null,[n("describe yaml"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'/path/to/docker-compose.yml'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"do"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'workstation'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'image'")]),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should eq "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'learnchef/inspec_workstation'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"["),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'workstation'")]),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'volumes'")]),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should cmp "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'.:/root'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"end"),n(`

describe docker_compose_config`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'/path/to/docker-compose.yml'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"do"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services.workstation.image'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should eq "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'learnchef/inspec_workstation'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
  its`),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'services.workstation.volumes'")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" should cmp "),s("span",{class:"token string-literal"},[s("span",{class:"token string"},"'.:/root'")]),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"end"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),T=s("p",null,[n("Now we should see an error if we go back to terminal and run the same command to execute a scan. We should get an error saying the "),s("code",null,"docker_compose_config"),n(" method does not yet exist. That's because we have not yet defined this resource.")],-1),I=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),S=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"2023"),n("-02-22T18:37:03+00:00"),s("span",{class:"token punctuation"},"]"),n(" ERROR: Failed to load profile docker-workstations: Failed to load "),s("span",{class:"token builtin class-name"},"source"),n(),s("span",{class:"token keyword"},"for"),n(" controls/example.rb: undefined method "),s("span",{class:"token variable"},[s("span",{class:"token variable"},"`"),n("docker_compose_config' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token comment"},"#<Inspec::ControlEvalContext:0x000000000593bb10>"),n(`

Profile:         InSpec Profile `),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:         `),s("span",{class:"token number"},"0.1"),n(`.0
Failure Message: Failed to load `),s("span",{class:"token builtin class-name"},"source"),n(),s("span",{class:"token keyword"},"for"),n(" controls/example.rb: undefined method "),s("span",{class:"token variable"},"`")]),n("docker_compose_config' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token comment"},"#<Inspec::ControlEvalContext:0x000000000593bb10>"),n(`
Target:          local://
Target ID:       6dcb9e6f-5ede-5474-9521-595fadf5c7ce

     No tests executed.

Test Summary: `),s("span",{class:"token number"},"0"),n(" successful, "),s("span",{class:"token number"},"0"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),D=l(`<h3 id="develop-the-docker-resource" tabindex="-1"><a class="header-anchor" href="#develop-the-docker-resource" aria-hidden="true">#</a> Develop the Docker resource</h3><p>In the <code>libraries</code> directory of the profile we will make a <code>docker_compose_config.rb</code> file, , the content of the file should look like this:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">DockerComposeConfig</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  name <span class="token string-literal"><span class="token string">&#39;docker_compose_config&#39;</span></span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),O={class:"hint-container tip"},R=s("p",{class:"hint-container-title"},"Using InSpec Init to Create the Resource",-1),P=s("p",null,[n("Alternatively, you can use "),s("code",null,"inspec init resource <your-resource-name>"),n(' to create the template for your custom resource. You may have a "lib" folder or a "libraries" folder. Make sure that InSpec recognizes the location of your custom resource.')],-1),q=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec init resource docker_compose_config "),s("span",{class:"token parameter variable"},"--overwrite"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),M=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Enter Subdirectory under "),s("span",{class:"token function"},"which"),n(` to create files: ./docker-workstations
Choose File layout, either `),s("span",{class:"token string"},"'resource-pack'"),n(" or "),s("span",{class:"token string"},"'core'"),s("span",{class:"token builtin class-name"},":"),n(` Resource Pack
Choose Which `),s("span",{class:"token builtin class-name"},"type"),n(` of resource template to use: Basic
Enter the description of this resource: A resource `),s("span",{class:"token keyword"},"for"),n(" testing "),s("span",{class:"token function"},"docker-compose"),n(` files
Enter Class Name `),s("span",{class:"token keyword"},"for"),n(` your resource.: DockerComposeConfig

 ─────────────────────────── InSpec Code Generator ─────────────────────────── 

Creating new resource at /workspaces/saf-training-lab-environment/docker-workstations
 • Creating directory /workspaces/saf-training-lab-environment/docker-workstations/docs
 • Creating `),s("span",{class:"token function"},"file"),n(` docs/docker_compose_config.md
 • Creating directory /workspaces/saf-training-lab-environment/docker-workstations/libraries
 • Creating `),s("span",{class:"token function"},"file"),n(` libraries/docker_compose_config.rb
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),N=s("p",null,"Now when we save and run the profile again using:",-1),Y=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),V=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"2023"),n("-02-22T18:38:40+00:00"),s("span",{class:"token punctuation"},"]"),n(" ERROR: Failed to load profile docker-workstations: Failed to load "),s("span",{class:"token builtin class-name"},"source"),n(),s("span",{class:"token keyword"},"for"),n(" controls/example.rb: wrong number of arguments "),s("span",{class:"token punctuation"},"("),n("given "),s("span",{class:"token number"},"1"),n(", expected "),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`

Profile:         InSpec Profile `),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:         `),s("span",{class:"token number"},"0.1"),n(`.0
Failure Message: Failed to load `),s("span",{class:"token builtin class-name"},"source"),n(),s("span",{class:"token keyword"},"for"),n(" controls/example.rb: wrong number of arguments "),s("span",{class:"token punctuation"},"("),n("given "),s("span",{class:"token number"},"1"),n(", expected "),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
Target:          local://
Target ID:       6dcb9e6f-5ede-5474-9521-595fadf5c7ce

     No tests executed.

Test Summary: `),s("span",{class:"token number"},"0"),n(" successful, "),s("span",{class:"token number"},"0"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),F=l(`<p>We will get an error saying we gave it the wrong number of arguments: <code>was given 1 but expected 0</code>. This is because every class in Ruby that has a parameter must have an initialize function to accept that parameter.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">DockerComposeConfig</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  name <span class="token string-literal"><span class="token string">&#39;docker_compose_config&#39;</span></span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token variable">@path</span> <span class="token operator">=</span> path
  <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s run the profile once more.</p>`,3),W=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),z=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /workspaces/saf-training-lab-environment/resources/docker-compose.yml
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"image"'),s("span",{class:"token punctuation"},"]"),n(" is expected to eq "),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"volumes"'),s("span",{class:"token punctuation"},"]"),n(" is expected to "),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`
  docker_compose_config
     ×  services.workstation.image 
     undefined method `),s("span",{class:"token variable"},[s("span",{class:"token variable"},"`"),n("services' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token comment"},"#<#<Class:0x00000000050205a8>:0x00000000032cbbd8>"),n(`
     ×  services.workstation.volumes 
     undefined method `),s("span",{class:"token variable"},"`")]),n("services' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token comment"},"#<#<Class:0x00000000050205a8>:0x00000000032cbbd8>"),n(`

Test Summary: `),s("span",{class:"token number"},"2"),n(" successful, "),s("span",{class:"token number"},"2"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),E=l(`<p>This time the profile runs, but we get a message that the <code>docker_compose_config</code> resource does not have the <code>services</code> method. So let&#39;s define that method now:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">DockerComposeConfig</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  name <span class="token string-literal"><span class="token string">&#39;docker_compose_config&#39;</span></span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token variable">@path</span> <span class="token operator">=</span> path
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">services</span></span>

  <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Start by just defining the <code>services</code> method. Then, let&#39;s run the profile once more.</p>`,3),L=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),H=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /workspaces/saf-training-lab-environment/resources/docker-compose.yml
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"image"'),s("span",{class:"token punctuation"},"]"),n(" is expected to eq "),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"volumes"'),s("span",{class:"token punctuation"},"]"),n(" is expected to "),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`
  docker_compose_config
     ×  services.workstation.image 
     undefined method `),s("span",{class:"token variable"},[s("span",{class:"token variable"},"`"),n("workstation' "),s("span",{class:"token keyword"},"for"),n(` nil:NilClass
     ×  services.workstation.volumes 
     undefined method `),s("span",{class:"token variable"},"`")]),n("workstation' "),s("span",{class:"token keyword"},"for"),n(` nil:NilClass

Test Summary: `),s("span",{class:"token number"},"2"),n(" successful, "),s("span",{class:"token number"},"2"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),G=l(`<p>Now we got a different failure that tells us a <code>nil</code> value was returned. So now we will go ahead and define the services method. We will use an already existing InSpec resource to parse the path file.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">DockerComposeConfig</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  name <span class="token string-literal"><span class="token string">&#39;docker_compose_config&#39;</span></span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token variable">@yaml</span> <span class="token operator">=</span> inspec<span class="token punctuation">.</span>yaml<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">services</span></span>
    <span class="token variable">@yaml</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">]</span>
  <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s run the profile once more.</p>`,3),j=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),B=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /workspaces/saf-training-lab-environment/resources/docker-compose.yml
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"image"'),s("span",{class:"token punctuation"},"]"),n(" is expected to eq "),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"volumes"'),s("span",{class:"token punctuation"},"]"),n(" is expected to "),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`
  docker_compose_config
     ×  services.workstation.image 
     undefined method `),s("span",{class:"token variable"},[s("span",{class:"token variable"},"`"),n("workstation' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token operator"},"<"),n("Hash:0x0000000003abada"),s("span",{class:"token operator"},[s("span",{class:"token file-descriptor important"},"8"),n(">")]),n(`
     ×  services.workstation.volumes 
     undefined method `),s("span",{class:"token variable"},"`")]),n("workstation' "),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token operator"},"<"),n("Hash:0x0000000003abada"),s("span",{class:"token operator"},[s("span",{class:"token file-descriptor important"},"8"),n(">")]),n(`

Test Summary: `),s("span",{class:"token number"},"2"),n(" successful, "),s("span",{class:"token number"},"2"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),X=l(`<p>You will notice that it parses correctly, but instead of our result we end up getting a hash. We need to convert the hash into an object that appears like other objects so that we may use our dot notation. So we will wrap our hash in a Ruby class called a <code>Hashie::Mash</code>. This gives us a quick way to convert a hash into a Ruby object with a number of methods attached to it. You will have to import the Hashie library by running <code>gem install hashie</code> and import it in the resource file to be used. It and is written as follows:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">&quot;hashie/mash&quot;</span></span>

<span class="token keyword">class</span> <span class="token class-name">DockerComposeConfig</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  name <span class="token string-literal"><span class="token string">&#39;docker_compose_config&#39;</span></span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token variable">@yaml</span> <span class="token operator">=</span> inspec<span class="token punctuation">.</span>yaml<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">services</span></span>
    Hashie<span class="token double-colon punctuation">::</span><span class="token class-name">Mash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token variable">@yaml</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;services&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lets run the profile again.</p>`,3),U=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("inspec "),s("span",{class:"token builtin class-name"},"exec"),n(` docker-workstations
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),K=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("Profile:   InSpec Profile "),s("span",{class:"token punctuation"},"("),n("docker-workstations"),s("span",{class:"token punctuation"},")"),n(`
Version:   `),s("span",{class:"token number"},"0.1"),n(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  YAML /workspaces/saf-training-lab-environment/resources/docker-compose.yml
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"image"'),s("span",{class:"token punctuation"},"]"),n(" is expected to eq "),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  `),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"services"'),n(", "),s("span",{class:"token string"},'"workstation"'),n(", "),s("span",{class:"token string"},'"volumes"'),s("span",{class:"token punctuation"},"]"),n(" is expected to "),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`
  docker_compose_config
     ✔  services.workstation.image is expected to eq `),s("span",{class:"token string"},'"learnchef/inspec_workstation"'),n(`
     ✔  services.workstation.volumes is expected to `),s("span",{class:"token function"},"cmp"),n(),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token string"},'".:/root"'),n(`

Test Summary: `),s("span",{class:"token number"},"4"),n(" successful, "),s("span",{class:"token number"},"0"),n(" failures, "),s("span",{class:"token number"},"0"),n(` skipped
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Z=s("p",null,"Everything passed!",-1),J=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Check your work"),s("p",null,"Check your work with the InSpec video below that walks through this docker resource example!")],-1),Q=s("div",{class:"video-container"},[s("iframe",{width:"1462",height:"762",src:"https://www.youtube.com/embed/9rbb2RWa9Oo?list=PLSZbtIlMt5rcbXOpMRucKzRMXR7HX7awy",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1);function $(ss,ns){const i=p("CodeTabs");return u(),d("div",null,[m,o(i,{id:"16",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[v]),tab1:e(({value:a,isActive:t})=>[b]),_:1}),g,o(i,{id:"37",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[h]),tab1:e(({value:a,isActive:t})=>[f]),_:1}),w,o(i,{id:"52",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[y]),tab1:e(({value:a,isActive:t})=>[_]),_:1}),x,o(i,{id:"81",data:[{id:"Tests"},{id:"Generic Tests"}]},{title0:e(({value:a,isActive:t})=>[n("Tests")]),title1:e(({value:a,isActive:t})=>[n("Generic Tests")]),tab0:e(({value:a,isActive:t})=>[C]),tab1:e(({value:a,isActive:t})=>[A]),_:1}),T,o(i,{id:"92",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[I]),tab1:e(({value:a,isActive:t})=>[S]),_:1}),D,s("div",O,[R,P,o(i,{id:"111",data:[{id:"Command"},{id:"Options"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Options")]),tab0:e(({value:a,isActive:t})=>[q]),tab1:e(({value:a,isActive:t})=>[M]),_:1})]),N,o(i,{id:"123",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[Y]),tab1:e(({value:a,isActive:t})=>[V]),_:1}),F,o(i,{id:"138",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[W]),tab1:e(({value:a,isActive:t})=>[z]),_:1}),E,o(i,{id:"153",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[L]),tab1:e(({value:a,isActive:t})=>[H]),_:1}),G,o(i,{id:"168",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[j]),tab1:e(({value:a,isActive:t})=>[B]),_:1}),X,o(i,{id:"183",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[n("Command")]),title1:e(({value:a,isActive:t})=>[n("Output")]),tab0:e(({value:a,isActive:t})=>[U]),tab1:e(({value:a,isActive:t})=>[K]),_:1}),Z,J,Q])}const is=r(k,[["render",$],["__file","06.html.vue"]]);export{is as default};
