import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as p,c as d,b as l,w as a,d as n,e as s,f as o}from"./app-WeARUK1X.js";const u={},m=n("p",null,[s("Let's practice creating our own custom resource. Let's say we want to write tests that examine the current state of a local Git repository. We want to create a "),n("code",null,"git"),s(" resource to handle all of InSpec's interactions with the Git repo under the hood, so that we can focus on writing clean and easy-to-read profile code.")],-1),k=n("p",null,"Let's take a look at this InSpec video that walks through this example and then try it out ourselves.",-1),b=n("div",{class:"video-container"},[n("iframe",{width:"1028",height:"578",src:"https://www.youtube.com/embed/Xka2xT6Cngg?list=PLSZbtIlMt5rcbXOpMRucKzRMXR7HX7awy",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),v=n("h3",{id:"create-new-inspec-profile",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-new-inspec-profile","aria-hidden":"true"},"#"),s(" Create new InSpec profile")],-1),g=n("p",null,"Let's start by creating a new profile:",-1),h=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec init profile "),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s(` ─────────────────────────── InSpec Code Generator ─────────────────────────── 

Creating new profile at /workspaces/saf-training-lab-environment/git
 • Creating `),n("span",{class:"token function"},"file"),s(` inspec.yml
 • Creating directory /workspaces/saf-training-lab-environment/git/controls
 • Creating `),n("span",{class:"token function"},"file"),s(` controls/example.rb
 • Creating `),n("span",{class:"token function"},"file"),s(` README.md
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=o(`<h3 id="develop-controls-to-test-run-profile" tabindex="-1"><a class="header-anchor" href="#develop-controls-to-test-run-profile" aria-hidden="true">#</a> Develop controls to test / run profile</h3><p>To write tests, we first need to know and have what we are testing! In your Codespaces environment, there is a git repository that we will test under the <code>resources</code> folder. The git repository will be the test target, similarly to how the docker containers acted as test targets in previous sections. Unzip the target git repository using the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">unzip</span> ./resources/git_test.zip 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will generate a <code>git_test</code> repository which we will use for these examples.</p><p>Now let&#39;s write some controls and test that they run. You can put these controls in the <code>example.rb</code> file generated in the <code>controls</code> folder of your <code>git</code> InSpec profile. These controls are written using the <code>command</code> resource which is provided by InSpec. We will write a <code>git</code> resource in this section to improve this test. <strong>Note that you will need to put the full directory path of the <code>.git</code> file from your <code>git_test</code> repository as the <code>git_dir</code> value on line 4 of <code>example.rb</code>. To get the full path of your current location in the terminal, use <code>pwd</code>.</strong></p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2018, The Authors</span>

git_dir <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;/workspaces/saf-training-lab-environment/git_test/.git&quot;</span></span>

<span class="token comment"># The following banches should exist</span>
describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">git_dir</span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stdout&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should match <span class="token regex-literal"><span class="token regex">/master/</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>

describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">git_dir</span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stdout&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should match <span class="token regex-literal"><span class="token regex">/testBranch/</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token comment"># What is the current branch</span>
describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">git_dir</span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stdout&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should match <span class="token regex-literal"><span class="token regex">/^\\* master/</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token comment"># What is the latest commit</span>
describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">git_dir</span><span class="token delimiter punctuation">}</span></span><span class="token string"> log -1 --pretty=format:&#39;%h&#39;&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stdout&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should match <span class="token regex-literal"><span class="token regex">/edc207f/</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token comment"># What is the second to last commit</span>
describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">git_dir</span><span class="token delimiter punctuation">}</span></span><span class="token string"> log --skip=1 -1 --pretty=format:&#39;%h&#39;&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stdout&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should match <span class="token regex-literal"><span class="token regex">/8c30bff/</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("Profile:   InSpec Profile "),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:   `),n("span",{class:"token number"},"0.1"),s(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /master/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /testBranch/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /^`),n("span",{class:"token punctuation"},"\\"),s(`* master/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /edc207f/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"--skip"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /8c30bff/

Test Summary: `),n("span",{class:"token number"},"5"),s(" successful, "),n("span",{class:"token number"},"0"),s(" failures, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=o(`<p>Our tests pass, but they all use the <code>command</code> resource. It&#39;s not best practice to do this -- for one thing, it makes our tests more complicated, and the output too long.</p><div class="hint-container warning"><p class="hint-container-title">But What If I Don&#39;t Care About The Tests Being Complicated And The Output Being Too Long?</p><p>Some test writers like to wrap their favorite bash commands in a <code>command</code> block and call it a day.<br> However, best practice is to write clean and maintainable InSpec code even if you yourself have no trouble using the <code>command</code> resource to do everything.</p><p>Recall that other developers and assessors need to be able to understand how your tests function. Nobody likes trying to debug someone else&#39;s profile that assumes that the operator knows exactly how the profile writer&#39;s favorite terminal commands work.</p></div><p>Let&#39;s rewrite these tests in a way that abstracts away the complexity of working with the <code>git</code> command into a resource.</p><h3 id="rewrite-test" tabindex="-1"><a class="header-anchor" href="#rewrite-test" aria-hidden="true">#</a> Rewrite test</h3><p>Let&#39;s rewrite the first test in our example file to make it more readable with a <code>git</code> resource as follows:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># The following banches should exist</span>
describe git<span class="token punctuation">(</span>git_dir<span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;branches&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should <span class="token keyword">include</span> <span class="token string-literal"><span class="token string">&#39;master&#39;</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s run the profile.</p>`,7),C=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2023"),s("-02-22T03:21:41+00:00"),n("span",{class:"token punctuation"},"]"),s(" ERROR: Failed to load profile git: Failed to load "),n("span",{class:"token builtin class-name"},"source"),s(),n("span",{class:"token keyword"},"for"),s(" controls/example.rb: undefined method "),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("git' "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token comment"},"#<Inspec::ControlEvalContext:0x000000000540af38>"),s(`

Profile:         InSpec Profile `),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:         `),n("span",{class:"token number"},"0.1"),s(`.0
Failure Message: Failed to load `),n("span",{class:"token builtin class-name"},"source"),s(),n("span",{class:"token keyword"},"for"),s(" controls/example.rb: undefined method "),n("span",{class:"token variable"},"`")]),s("git' "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token comment"},"#<Inspec::ControlEvalContext:0x000000000540af38>"),s(`
Target:          local://
Target ID:       6dcb9e6f-5ede-5474-9521-595fadf5c7ce

     No tests executed.

Test Summary: `),n("span",{class:"token number"},"0"),s(" successful, "),n("span",{class:"token number"},"0"),s(" failures, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=o(`<p>We should get an error because the git method and resource are not defined yet. We should fix that.</p><h3 id="develop-the-git-resource" tabindex="-1"><a class="header-anchor" href="#develop-the-git-resource" aria-hidden="true">#</a> Develop the git resource</h3><p>Let&#39;s start by creating a new file called <code>git.rb</code> in the <code>libraries</code> directory. If you do not already have a <code>libraries</code> directory, you can make one in the <code>git</code> InSpec profile directory. The content of the file should look like this:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name <span class="token string-literal"><span class="token string">&#39;git&#39;</span></span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Setting Up a Resource Using InSpec Init</p><p>Instead of just creating the <code>git.rb</code> file in the <code>libraries</code> directory, you can use InSpec to assist you in creating a resource. Run <code>inspec init resource &lt;your-resource-name&gt;</code> and follow the prompts to create the foundation and see examples for a resource.</p></div><p>Now run the profile again.</p>`,6),I=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2023"),s("-02-22T03:25:57+00:00"),n("span",{class:"token punctuation"},"]"),s(" ERROR: Failed to load profile git: Failed to load "),n("span",{class:"token builtin class-name"},"source"),s(),n("span",{class:"token keyword"},"for"),s(" controls/example.rb: wrong number of arguments "),n("span",{class:"token punctuation"},"("),s("given "),n("span",{class:"token number"},"1"),s(", expected "),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`

Profile:         InSpec Profile `),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:         `),n("span",{class:"token number"},"0.1"),s(`.0
Failure Message: Failed to load `),n("span",{class:"token builtin class-name"},"source"),s(),n("span",{class:"token keyword"},"for"),s(" controls/example.rb: wrong number of arguments "),n("span",{class:"token punctuation"},"("),s("given "),n("span",{class:"token number"},"1"),s(", expected "),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
Target:          local://
Target ID:       6dcb9e6f-5ede-5474-9521-595fadf5c7ce

     No tests executed.

Test Summary: `),n("span",{class:"token number"},"0"),s(" successful, "),n("span",{class:"token number"},"0"),s(" failures, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=o(`<p>This time we get another error letting us know that we have a resource that has been given the incorrect number of arguments. This means we have given an additional parameter to this resource that we have not yet accepted.</p><p>Each resource will require an initialization method.</p><p>For our git.rb file let&#39;s add that initialization method:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name <span class="token string-literal"><span class="token string">&#39;git&#39;</span></span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is saving the path we are passing in from the control into an instance method called <code>path</code>.</p><p>Now when we run the profile.</p>`,6),O=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("Profile:   InSpec Profile "),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:   `),n("span",{class:"token number"},"0.1"),s(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  `),n("span",{class:"token function"},"git"),s(`
     ×  branches 
     undefined method `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("branches' "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token comment"},"#<#<Class:0x00000000041485a8>:0x00000000043620c8>"),s(`
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s(`
     ✔  stdout is expected to match /testBranch/
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s(`
     ✔  stdout is expected to match /^`),n("span",{class:"token punctuation"},"\\"),s(`* master/
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s(`
     ✔  stdout is expected to match /edc207f/
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"--skip"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),s(`\`
     ✔  stdout is expected to match /8c30bff/

Test Summary: `),n("span",{class:"token number"},"4"),s(" successful, "),n("span",{class:"token number"},"1"),s(" failure, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=o(`<p>The test will run but we will get an error saying we do not have a <code>branches</code> method. Remember that the other 4 tests are still passing because they are not yet using the <code>git</code> resource, but are still relying on InSpec&#39;s <code>command</code> resource.</p><p>Let&#39;s go back to our git.rb file to fix that by adding a <code>branches</code> method:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name <span class="token string-literal"><span class="token string">&#39;git&#39;</span></span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">branches</span></span>

    <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have now defined the branches method. Let&#39;s see what the test output shows us.</p>`,4),R=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("Profile:   InSpec Profile "),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:   `),n("span",{class:"token number"},"0.1"),s(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  `),n("span",{class:"token function"},"git"),s(`
     ×  branches is expected to include `),n("span",{class:"token string"},'"master"'),s(`
     expected nil to include `),n("span",{class:"token string"},'"master"'),s(", but it does not respond to "),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("include?"),n("span",{class:"token variable"},"`")]),s(`
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /testBranch/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git branch"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /^`),n("span",{class:"token punctuation"},"\\"),s(`* master/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /edc207f/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"--skip"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /8c30bff/

Test Summary: `),n("span",{class:"token number"},"4"),s(" successful, "),n("span",{class:"token number"},"1"),s(" failure, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=o(`<p>Now the error message says that the <code>branches</code> method is returning a null value when it&#39;s expecting an array or something that is able to accept the include method invoked on it.</p><p>We can use the InSpec helper method which enables you to invoke any other inspec resource as seen below:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name <span class="token string-literal"><span class="token string">&#39;git&#39;</span></span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">branches</span></span>
        inspec<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token variable">@path</span></span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout
    <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have borrowed the built-in <code>command</code> resource to handle running Git&#39;s CLI commands.</p><p>Now we see that we get a passing test!</p><p>Now let&#39;s adjust our test to also check for our second branch that we created earlier as well as check our current branch:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># The following banches should exist</span>
describe git<span class="token punctuation">(</span>git_dir<span class="token punctuation">)</span> <span class="token keyword">do</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;branches&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should <span class="token keyword">include</span> <span class="token string-literal"><span class="token string">&#39;master&#39;</span></span> <span class="token punctuation">}</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;branches&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should <span class="token keyword">include</span> <span class="token string-literal"><span class="token string">&#39;testBranch&#39;</span></span> <span class="token punctuation">}</span>
  its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;current_branch&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;master&#39;</span></span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),D=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("Profile:   InSpec Profile "),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:   `),n("span",{class:"token number"},"0.1"),s(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  `),n("span",{class:"token function"},"git"),s(`
     ✔  branches is expected to include `),n("span",{class:"token string"},'"master"'),s(`
     ✔  branches is expected to include `),n("span",{class:"token string"},'"testBranch"'),s(`
     ×  current_branch 
     undefined method `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("current_branch' "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token comment"},"#<#<Class:0x0000000005400588>:0x00000000053fd0b8>"),s(`
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s(`
     ✔  stdout is expected to match /edc207f/
  Command: `),n("span",{class:"token variable"},"`")]),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"--skip"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),s(`\`
     ✔  stdout is expected to match /8c30bff/

Test Summary: `),n("span",{class:"token number"},"6"),s(" successful, "),n("span",{class:"token number"},"1"),s(" failure, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=o(`<p>Let&#39;s head over to the git.rb file to create the <code>current_branch</code> method we are invoking in the above test:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># encoding: utf-8</span>
<span class="token comment"># copyright: 2019, The Authors</span>

<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token operator">&lt;</span> Inspec<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name <span class="token string-literal"><span class="token string">&#39;git&#39;</span></span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token variable">@path</span> <span class="token operator">=</span> path
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">branches</span></span>
        inspec<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token variable">@path</span></span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">current_branch</span></span>
        branch_name <span class="token operator">=</span> inspec<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;git --git-dir </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token variable">@path</span></span><span class="token delimiter punctuation">}</span></span><span class="token string"> branch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>strip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>find <span class="token keyword">do</span> <span class="token operator">|</span>name<span class="token operator">|</span>
            name<span class="token punctuation">.</span>start_with<span class="token operator">?</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;*&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">end</span>
        branch_name<span class="token punctuation">.</span>gsub<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/^\\*/</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip
    <span class="token keyword">end</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can run the profile again.</p>`,3),z=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("inspec "),n("span",{class:"token builtin class-name"},"exec"),s(),n("span",{class:"token function"},"git"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("Profile:   InSpec Profile "),n("span",{class:"token punctuation"},"("),s("git"),n("span",{class:"token punctuation"},")"),s(`
Version:   `),n("span",{class:"token number"},"0.1"),s(`.0
Target:    local://
Target ID: 6dcb9e6f-5ede-5474-9521-595fadf5c7ce

  `),n("span",{class:"token function"},"git"),s(`
     ✔  branches is expected to include `),n("span",{class:"token string"},'"master"'),s(`
     ✔  branches is expected to include `),n("span",{class:"token string"},'"testBranch"'),s(`
     ✔  current_branch is expected to `),n("span",{class:"token function"},"cmp"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"master"'),s(`
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /edc207f/
  Command: `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"git"),s(" --git-dir /workspaces/saf-training-lab-environment/git_test/.git log "),n("span",{class:"token parameter variable"},"--skip"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token parameter variable"},"-1"),s(),n("span",{class:"token parameter variable"},"--pretty"),n("span",{class:"token operator"},"="),s("format:"),n("span",{class:"token string"},"'%h'"),n("span",{class:"token variable"},"`")]),s(`
     ✔  stdout is expected to match /8c30bff/

Test Summary: `),n("span",{class:"token number"},"7"),s(" successful, "),n("span",{class:"token number"},"0"),s(" failures, "),n("span",{class:"token number"},"0"),s(` skipped
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,"All the tests should pass!",-1),G=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Exercise!"),n("p",null,"As a solo exercise, try to create a method in the git.rb file to check what the last commit is.")],-1);function M(X,U){const i=r("CodeTabs");return p(),d("div",null,[m,k,b,v,g,l(i,{id:"14",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[f]),_:1}),w,l(i,{id:"36",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[y]),tab1:a(({value:e,isActive:t})=>[_]),_:1}),x,l(i,{id:"71",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[C]),tab1:a(({value:e,isActive:t})=>[T]),_:1}),A,l(i,{id:"97",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[I]),tab1:a(({value:e,isActive:t})=>[S]),_:1}),q,l(i,{id:"121",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[O]),tab1:a(({value:e,isActive:t})=>[N]),_:1}),P,l(i,{id:"139",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[R]),tab1:a(({value:e,isActive:t})=>[B]),_:1}),L,l(i,{id:"164",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[D]),tab1:a(({value:e,isActive:t})=>[V]),_:1}),W,l(i,{id:"179",data:[{id:"Command"},{id:"Output"}]},{title0:a(({value:e,isActive:t})=>[s("Command")]),title1:a(({value:e,isActive:t})=>[s("Output")]),tab0:a(({value:e,isActive:t})=>[z]),tab1:a(({value:e,isActive:t})=>[E]),_:1}),F,G])}const Y=c(u,[["render",M],["__file","05.html.vue"]]);export{Y as default};
