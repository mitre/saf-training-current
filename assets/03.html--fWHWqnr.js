import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as p,c as h,b as i,w as s,d as e,e as n,f as l}from"./app-WeARUK1X.js";const m={},b=e("h2",{id:"studying-an-inspec-profile",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#studying-an-inspec-profile","aria-hidden":"true"},"#"),n(" Studying an InSpec profile")],-1),v=e("p",null,"Let's start by creating a profile that will contain NGINX tests.",-1),f=e("p",null,"At your terminal, type:",-1),g=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`inspec init profile my_nginx
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),_=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n(` ─────────────────────────── InSpec Code Generator ─────────────────────────── 

Creating new profile at /workspaces/saf-training-lab-environment/my_nginx
 • Creating `),e("span",{class:"token function"},"file"),n(` inspec.yml
 • Creating directory /workspaces/saf-training-lab-environment/my_nginx/controls
 • Creating `),e("span",{class:"token function"},"file"),n(` controls/example.rb
 • Creating `),e("span",{class:"token function"},"file"),n(` README.md
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=e("h3",{id:"understanding-the-profile-structure",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#understanding-the-profile-structure","aria-hidden":"true"},"#"),n(" Understanding the profile structure")],-1),y=e("p",null,"Let's take a look at how the profile is structured. We'll start with how a profile's files are structured and then move to what makes up an InSpec control.",-1),x=e("p",null,[n("First, run "),e("code",null,"tree"),n(" to see what's in the "),e("code",null,"my_nginx"),n(" profile.")],-1),w=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`tree my_nginx
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),A=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`my_nginx
├── README.md
├── controls
│   └── example.rb
└── inspec.yml
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),I=e("p",null,"Here's the role of each component.",-1),E=e("li",null,[e("code",null,"README.md"),n(" provides documentation about the profile, including what it covers and how to run it.")],-1),C=e("li",null,[n("The "),e("code",null,"controls"),n(" directory contains files which implement the InSpec tests.")],-1),S=e("li",null,[e("code",null,"inspec.yml"),n(" provides metadata, or information, about the profile. Metadata includes the profile's description, author, copyright, and version.")],-1),T=e("code",null,"libraries",-1),D=e("code",null,"libraries",-1),R={href:"https://www.inspec.io/docs/reference/dsl_resource/",target:"_blank",rel:"noopener noreferrer"},L=l(`<h3 id="understand-a-control-s-structure" tabindex="-1"><a class="header-anchor" href="#understand-a-control-s-structure" aria-hidden="true">#</a> Understand a control&#39;s structure</h3><p>Let&#39;s take a look at the default control file, <code>controls/example.rb</code>.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>title <span class="token string-literal"><span class="token string">&#39;sample section&#39;</span></span>

<span class="token comment"># you can also use plain tests</span>
describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token comment"># you add controls here</span>
control <span class="token string-literal"><span class="token string">&#39;tmp-1.0&#39;</span></span> <span class="token keyword">do</span>                        <span class="token comment"># A unique ID for this control</span>
  impact <span class="token number">0.7</span>                                <span class="token comment"># The criticality, if this control fails.</span>
  title <span class="token string-literal"><span class="token string">&#39;Create /tmp directory&#39;</span></span>             <span class="token comment"># A human-readable title</span>
  desc <span class="token string-literal"><span class="token string">&#39;An optional description...&#39;</span></span>
  describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>                  <span class="token comment"># The actual test</span>
    it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tip for developing profiles</p><p>When creating new profiles use the existing example file as a template</p></div><p>This example shows two tests. Both tests check for the existence of the <code>/tmp</code> directory. The second test provides additional information about the test. Let&#39;s break down each component.</p><ul><li><code>control</code> (line 9) is followed by the control&#39;s name. Each control in a profile has a unique name.</li><li><code>impact</code> (line 10) measures the relative importance of the test and must be a value between 0.0 and 1.0.</li><li><code>title</code> (line 11) defines the control&#39;s purpose.</li><li><code>desc</code> (line 12) provides a more complete description of what the control checks for.</li><li><code>describe</code> (lines 13 — 15) defines the test. Here, the test checks for the existence of the <code>/tmp</code> directory.</li></ul><p>In Ruby, the <code>do</code> and <code>end</code> keywords define a <code>block</code>. An InSpec control always contains at least one <code>describe</code> block. However, a control can contain many <code>describe</code> blocks.</p>`,7),q={class:"hint-container tip"},B=e("p",{class:"hint-container-title"},"More information on a block in Ruby",-1),M={href:"http://ruby-for-beginners.rubymonstas.org/blocks.html",target:"_blank",rel:"noopener noreferrer"},N=l(`<h3 id="understand-a-describe-block-s-structure" tabindex="-1"><a class="header-anchor" href="#understand-a-describe-block-s-structure" aria-hidden="true">#</a> Understand a describe block&#39;s structure</h3><p>As with many test frameworks, InSpec code resembles natural language. Here&#39;s the format of a describe block.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>describe <span class="token operator">&lt;</span>entity<span class="token operator">&gt;</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> <span class="token operator">&lt;</span>expectation<span class="token operator">&gt;</span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An InSpec test has two main components: the subject to examine and the subject&#39;s expected state. Here, <code>&lt;entity&gt;</code> is the subject you want to examine, for example, a package name, service, file, or network port. The <code>&lt;expectation&gt;</code> specifies the desired result or expected state, for example, that a port should be open (or perhaps should not be open.)</p><p>Let&#39;s take a closer look at the <code>describe</code> block in the example.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because InSpec resembles human-readable language, you might read this test as &quot;/tmp should be a directory.&quot; Let&#39;s break down each component.</p><hr><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> <code>file</code></h4>`,9),O={href:"https://www.inspec.io/docs/reference/resources/file/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.inspec.io/docs/reference/resources/",target:"_blank",rel:"noopener noreferrer"},j=l('<div class="hint-container info"><p class="hint-container-title">Note</p><p>If you&#39;re familiar with Chef, you know that a resource configures one part of the system. InSpec resources are similar.</p></div><hr><h4 id="it" tabindex="-1"><a class="header-anchor" href="#it" aria-hidden="true">#</a> <code>it</code></h4><p>The <code>it</code> statement validates one of your resource&#39;s features. A <code>describe</code> block contains one or more <code>it</code> statements. <code>it</code> enables you to test the resource itself. You&#39;ll also see <code>its</code>, which describes some feature of the resource, such as its mode or owner. You&#39;ll see examples of both <code>it</code> and <code>its</code> shortly.</p><div class="hint-container warning"><p class="hint-container-title">it vs. its</p><p>Important! Just like in English grammar, pay attention to the difference between the thing (it) and the possessive word (its).</p><p><code>it</code> is used to describe an action or the expected behavior of the <strong>subject/resource</strong> in question.<br> e.g. <code>it { should be_owned_by &#39;root&#39; }</code></p><p><code>its</code> is used to specify the expectation(s) of <strong>an attribute of the subject/resource</strong>.<br> e.g. <code>its(&quot;signal&quot;) { should eq &quot;on&quot; }</code></p></div><hr><h4 id="should" tabindex="-1"><a class="header-anchor" href="#should" aria-hidden="true">#</a> <code>should</code></h4><p><code>should</code> describes the expectation. <code>should</code> asserts that the condition that follows <em>should</em> be true. Alternatively, <code>should_not</code> asserts that the condition that follows <em>should not</em> be true. You&#39;ll see examples of both shortly.</p><hr><h4 id="be-directory" tabindex="-1"><a class="header-anchor" href="#be-directory" aria-hidden="true">#</a> <code>be_directory</code></h4>',10),H=e("code",null,"be_directory",-1),F={href:"https://www.inspec.io/docs/reference/matchers/",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"file",-1),P=e("code",null,"be_directory",-1),Y=e("h3",{id:"comprehension-check",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#comprehension-check","aria-hidden":"true"},"#"),n(" Comprehension Check!")],-1),U=e("p",null,"Look at the 4 file structures below. Determine which are valid InSpec Profiles!",-1),W=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n(`folder_A
├── README.md
├── controls
│   ├── example-control-1.rb
│   ├── example-control-2.rb
│   └── example-control-3.rb
└── inspec.yml

`),e("span",{class:"token number"},"2"),n(" directories, "),e("span",{class:"token number"},"5"),n(` files
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),J=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n(`folder_B
├── README.md
├── controls
    ├── example-control-1.rb
    ├── example-control-2.rb
    └── example-control-3.rb

`),e("span",{class:"token number"},"2"),n(" directories, "),e("span",{class:"token number"},"4"),n(` files
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),X=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n(`folder_C
├── README.md
├── example-control-1.rb
├── example-control-2.rb
├── example-control-3.rb
└── inspec.yml

`),e("span",{class:"token number"},"1"),n(" directories, "),e("span",{class:"token number"},"5"),n(` files
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),z=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n(`folder_D
├── Gemfile
├── README.md
├── controls
│   ├── example-control-1.rb
│   ├── example-control-2.rb
│   └── example-control-3.rb
├── inspec.yml
└── libraries
    └── my_resource.rb

`),e("span",{class:"token number"},"3"),n(" directories, "),e("span",{class:"token number"},"7"),n(` files
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),K=l('<details class="hint-container details"><summary>Which of the folders above (A, B, C, and D) are valid InSpec profiles?</summary><p>A and D are valid InSpec profiles!</p><p><strong>INVALID PROFILES:</strong></p><ul><li><strong>B</strong> is not a profile because it is missing the inspec.yml file!</li><li><strong>C</strong> is not a profile because it does not have a controls directory!</li></ul><p><strong>VALID PROFILES:</strong></p><ul><li><strong>A</strong> is a profile!</li><li><strong>D</strong> is a profile! A profile can have extra things like a Gemfile and a libraries folder as long as it has the controls directory and the inspec.yml file!</li></ul></details><div class="hint-container tip"><p class="hint-container-title">TIP: inspec check</p><p>To see if you have a valid InSpec profile, you can run <code>inspec check &lt;path-to-inspec-profile-folder&gt;</code></p></div>',2);function Q(Z,$){const r=c("CodeTabs"),o=c("ExternalLinkIcon"),d=c("RouterLink");return p(),h("div",null,[b,v,f,i(r,{id:"9",data:[{id:"InSpec Init Command"},{id:"Expected Output"}],"tab-id":"shell"},{title0:s(({value:t,isActive:a})=>[n("InSpec Init Command")]),title1:s(({value:t,isActive:a})=>[n("Expected Output")]),tab0:s(({value:t,isActive:a})=>[g]),tab1:s(({value:t,isActive:a})=>[_]),_:1}),k,y,x,i(r,{id:"26",data:[{id:"Tree Command"},{id:"Expected Output - my_nginx folder structure"}],"tab-id":"shell"},{title0:s(({value:t,isActive:a})=>[n("Tree Command")]),title1:s(({value:t,isActive:a})=>[n("Expected Output - my_nginx folder structure")]),tab0:s(({value:t,isActive:a})=>[w]),tab1:s(({value:t,isActive:a})=>[A]),_:1}),I,e("ul",null,[E,C,S,e("li",null,[n("You may optionally have a "),T,n(" directory. The "),D,n(" directory contains resource extensions. A resource extension enables you to "),e("a",R,[n("define your own resource types"),i(o)]),n(". The "),i(d,{to:"/courses/advanced/"},{default:s(()=>[n("Advanced Security Automation Developer Class")]),_:1}),n(" teaches about defining your own resources.")])]),L,e("div",q,[B,e("p",null,[e("a",M,[n("Ruby's block syntax"),i(o)])])]),N,e("p",null,[e("a",O,[n("file"),i(o)]),n(" is an InSpec "),e("a",V,[n("resource"),i(o)]),n(". Resources are written as Ruby classes to describe a part of the system, providing attributes that are easy to call upon within the InSpec test. For example, the InSpec file resource tests for file attributes, including a file's owner, mode, and permissions. The example examines the /tmp directory.")]),j,e("p",null,[H,n(" is an example of a "),e("a",F,[n("matcher"),i(o)]),n(". A matcher compares a resource's actual value to its expected value. InSpec provides several predefined matchers. The "),G,n(" resource provides the "),P,n(" matcher.")]),Y,U,i(r,{id:"176",data:[{id:"A"},{id:"B"},{id:"C"},{id:"D"}],"tab-id":"shell"},{title0:s(({value:t,isActive:a})=>[n("A")]),title1:s(({value:t,isActive:a})=>[n("B")]),title2:s(({value:t,isActive:a})=>[n("C")]),title3:s(({value:t,isActive:a})=>[n("D")]),tab0:s(({value:t,isActive:a})=>[W]),tab1:s(({value:t,isActive:a})=>[J]),tab2:s(({value:t,isActive:a})=>[X]),tab3:s(({value:t,isActive:a})=>[z]),_:1}),K])}const se=u(m,[["render",Q],["__file","03.html.vue"]]);export{se as default};
