import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as i,c as o,d as n,e,b as l,f as c}from"./app-WeARUK1X.js";const r={},p=n("h1",{id:"understanding-the-kitchen-container-yml",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#understanding-the-kitchen-container-yml","aria-hidden":"true"},"#"),e(" Understanding the "),n("a",{href:"./kitchen.container.yml"},[n("code",null,"kitchen.container.yml")])],-1),u=n("p",null,[e("The "),n("code",null,"kitchen.container.yml"),e(" file orchestrates our container-based test suite. It defines two types of containers, hardened and vanilla, and specifies the inspec_tests to run against them. It also configures the generation and storage of test reports.")],-1),d={href:"https://github.com/test-kitchen/test-kitchen/blob/main/lib/kitchen/driver/dummy.rb",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>This approach allows for the evaluation of existing containers, even those created by other workflows. It can be leveraged to build a generalized workflow for validating any container against our Benchmark requirements, providing a comprehensive assessment of its security posture.</p><h2 id="example-kitchen-container-yml-file" tabindex="-1"><a class="header-anchor" href="#example-kitchen-container-yml-file" aria-hidden="true">#</a> Example <code>kitchen.container.yml</code> file</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token comment"># see: https://kitchen.ci/docs/drivers/dokken/</span>

<span class="token key atrule">provisioner</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dummy

<span class="token key atrule">driver</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dokken
  <span class="token key atrule">pull_platform_image</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token key atrule">transport</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dokken

<span class="token key atrule">platforms</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ubi8

<span class="token key atrule">suites</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vanilla
    <span class="token key atrule">driver</span><span class="token punctuation">:</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">&#39;VANILLA_CONTAINER_IMAGE&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> &quot;registry.access.redhat.com/ubi8/ubi<span class="token punctuation">:</span>8.9<span class="token punctuation">-</span>1028&quot; %<span class="token punctuation">&gt;</span>
    <span class="token key atrule">verifier</span><span class="token punctuation">:</span>
      <span class="token key atrule">input_files</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> container.vanilla.inputs.yml
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hardened
    <span class="token key atrule">driver</span><span class="token punctuation">:</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">&#39;HARDENED_CONTAINER_IMAGE&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> &quot;registry1.dso.mil/ironbank/redhat/ubi/ubi8&quot; %<span class="token punctuation">&gt;</span>
    <span class="token key atrule">verifier</span><span class="token punctuation">:</span>
      <span class="token key atrule">input_files</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> container.hardened.inputs.yml
      <span class="token comment"># creds_file: &#39;./creds.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="breakdown-of-the-kitchen-container-yml-file" tabindex="-1"><a class="header-anchor" href="#breakdown-of-the-kitchen-container-yml-file" aria-hidden="true">#</a> Breakdown of the <code>kitchen.container.yml</code> file:</h1><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">provisioner</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dummy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This section configures the provisioner, which is the tool that brings your system to the desired state. Here, it&#39;s using a dummy provisioner, which means no provisioning will be done.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">driver</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dokken
  <span class="token key atrule">pull_platform_image</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This section configures the driver, which is responsible for creating and managing the instances. Here, it&#39;s set to use the Dokken driver, which is designed for running tests in Docker containers. The <code>pull_platform_image: false</code> option means that it won&#39;t automatically pull the Docker image for the platform; it will use the image specified in the suite.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">transport</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dokken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This section configures the transport, which is the method Test Kitchen uses to communicate with the instance. Here, it&#39;s using the Dokken transport, which communicates with the Docker container.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">platforms</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ubi8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This section defines the platforms on which your tests will run. In this case, it&#39;s UBI 8 (Red Hat&#39;s Universal Base Image 8).</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">suites</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vanilla
    <span class="token key atrule">driver</span><span class="token punctuation">:</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">&#39;VANILLA_CONTAINER_IMAGE&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> &quot;registry.access.redhat.com/ubi8/ubi<span class="token punctuation">:</span>8.9<span class="token punctuation">-</span>1028&quot; %<span class="token punctuation">&gt;</span>
    <span class="token key atrule">verifier</span><span class="token punctuation">:</span>
      <span class="token key atrule">input_files</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> container.vanilla.inputs.yml
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hardened
    <span class="token key atrule">driver</span><span class="token punctuation">:</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">&#39;HARDENED_CONTAINER_IMAGE&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> &quot;registry1.dso.mil/ironbank/redhat/ubi/ubi8&quot; %<span class="token punctuation">&gt;</span>
    <span class="token key atrule">verifier</span><span class="token punctuation">:</span>
      <span class="token key atrule">input_files</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> container.hardened.inputs.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This section defines the test suites. Each suite represents a different configuration to test.</p><ul><li>Each suite has a <code>name</code>, a <code>driver</code>, and a <code>verifier</code>.</li><li>The <code>driver</code> section specifies the Docker image to use for the suite. It&#39;s dynamically set based on the <code>VANILLA_CONTAINER_IMAGE</code> or <code>HARDENED_CONTAINER_IMAGE</code> environment variable, with a default value if the variable is not set.</li><li>The <code>verifier</code> section specifies files that contain input variables for the InSpec profile.</li></ul><p>The workflow of Test Kitchen involves the following steps:</p><ol><li><strong>Create:</strong> Test Kitchen uses the driver to create a Docker container of the platform.</li><li><strong>Converge:</strong> Test Kitchen uses the provisioner to apply the infrastructure code to the container. In this case, no provisioning is done.</li><li><strong>Verify:</strong> Test Kitchen checks if the container is in the desired state. This is not shown in your file, but it would be configured in the <code>verifier</code> section.</li><li><strong>Destroy:</strong> Test Kitchen uses the driver to destroy the container after testing. This is not shown in your file, but it would be configured in the <code>driver</code> section.</li></ol><p>The <code>transport</code> is used in all these steps to communicate with the container.</p><h2 id="environment-variables-in-kitchen-container-yml" tabindex="-1"><a class="header-anchor" href="#environment-variables-in-kitchen-container-yml" aria-hidden="true">#</a> Environment Variables in <code>kitchen.container.yml</code></h2><p>The <code>kitchen.container.yml</code> file uses the following environment variables to select the containers used during its <code>hardened</code> and <code>vanilla</code> testing runs. You can test any container using these environment variables, even though standard defaults are set.</p><ul><li><code>VANILLA_CONTAINER_IMAGE</code>: This variable specifies the Docker container image considered &#39;not hardened&#39;. <ul><li>default: <code>registry.access.redhat.com/ubi8/ubi:8.9-1028</code></li></ul></li><li><code>HARDENED_CONTAINER_IMAGE</code>: This variable specifies the Docker container image considered &#39;hardened&#39;. <ul><li>default: <code>registry1.dso.mil/ironbank/redhat/ubi/ubi8</code></li></ul></li></ul>`,21);function m(h,v){const s=t("ExternalLinkIcon");return i(),o("div",null,[p,u,n("p",null,[e("Unlike other test suites, the container suite skips the 'provisioner' stage for the vanilla and hardened targets. Instead, during the create stage, it simply downloads and starts the specified images. This is due to the use of the "),n("a",d,[e("dummy Test Kitchen driver"),l(s)]),e(", which is ideal for interacting with pre-configured or immutable targets like containers.")]),k])}const y=a(r,[["render",m],["__file","22.html.vue"]]);export{y as default};
