import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as u,o as m,c as k,d as n,e as s,b as i,w as e,f as l}from"./app-WeARUK1X.js";const r="/saf-training-current/assets/the_completed_pipeline_run-Wpx-ZqJy.png",h="/saf-training-current/assets/summary_data-nKGFtr64.png",b={},v=l('<h2 id="verification" tabindex="-1"><a class="header-anchor" href="#verification" aria-hidden="true">#</a> Verification</h2><p>At this point we have a much more mature workflow file. We have one more activity we need to do -- verification, or checking that the output of our validation run met our expectations.</p><p>Note that &quot;meeting our expectations&quot; does <em>not</em> automatically mean that there are no failing tests. In many real-world use cases, security tests fail, but the software is still considered worth the risk to deploy because of mitigations for that risk, or perhaps the requirement is inapplicable due to the details of the deployment. With that said, we still want to run our tests to make sure we are continually collecting data; we just don&#39;t want our pipeline to halt if it finds a test that we were always expecting to fail.</p><p>By default, the InSpec executable returns a code 100 if <em>any</em> tests in a profile run fail. Pipeline orchestrators, like most software, interpret any non-zero return code as a serious failure, and will halt the pipeline run accordingly unless we explicitly tell it to ignore errors. This is why the &quot;VALIDATE - Run InSpec&quot; step has the <code>continue-on-error: true </code> attribute specified.</p><p>Our goal is to complete our InSpec scan, collect the result as a report file, and then parse that file to determine if we met our own <em>threshold</em> of security. We can do this with the SAF CLI.</p><h3 id="the-saf-cli" tabindex="-1"><a class="header-anchor" href="#the-saf-cli" aria-hidden="true">#</a> The SAF CLI</h3>',6),f={href:"https://saf-cli.mitre.org/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[s("This tool was installed alongside InSpec when you ran the "),n("code",null,"./build-lab.sh"),s(" script. For general installation instructions, see the first link in the above paragraph.")],-1),g=n("h4",{id:"saf-cli-capabilities",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#saf-cli-capabilities","aria-hidden":"true"},"#"),s(" SAF CLI Capabilities")],-1),w={href:"https://saf-cli.mitre.org/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"In addition to the documentation site, you can view the SAF CLI's capabilities by running:",-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("saf "),n("span",{class:"token builtin class-name"},"help"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("The MITRE Security Automation Framework "),n("span",{class:"token punctuation"},"("),s("SAF"),n("span",{class:"token punctuation"},")"),s(" Command Line Interface "),n("span",{class:"token punctuation"},"("),s("CLI"),n("span",{class:"token punctuation"},")"),s(" brings together applications, techniques, libraries, and tools developed by MITRE and the security community to streamline security automation "),n("span",{class:"token keyword"},"for"),s(` systems and DevOps pipelines

VERSION
  @mitre/saf/1.2.5 linux-x64 node-v16.19.0

USAGE
  $ saf `),n("span",{class:"token punctuation"},"["),s("COMMAND"),n("span",{class:"token punctuation"},"]"),s(`

TOPICS
  attest      `),n("span",{class:"token punctuation"},"["),s("Attest"),n("span",{class:"token punctuation"},"]"),s("       Attest to "),n("span",{class:"token string"},"'Not Reviewed'"),s(" control requirements "),n("span",{class:"token punctuation"},"("),s("that canâ€™t be tested automatically by security tools and hence require manual review"),n("span",{class:"token punctuation"},")"),s(`, helping to
              account `),n("span",{class:"token keyword"},"for"),s(` all requirements
  convert     `),n("span",{class:"token punctuation"},"["),s("Normalize"),n("span",{class:"token punctuation"},"]"),s(`    Convert security results from all your security tools between common data formats
  emasser     `),n("span",{class:"token punctuation"},"["),s("eMASS"),n("span",{class:"token punctuation"},"]"),s(`        The eMASS REST API implementation
  generate    `),n("span",{class:"token punctuation"},"["),s("Generate"),n("span",{class:"token punctuation"},"]"),s("     Generate pipeline thresholds, configuration files, and "),n("span",{class:"token function"},"more"),s(`
  harden      `),n("span",{class:"token punctuation"},"["),s("Harden"),n("span",{class:"token punctuation"},"]"),s("       Implement security baselines using Ansible, Chef, and Terraform content: Visit https://saf.mitre.org/"),n("span",{class:"token comment"},"#/harden to explore and run hardening scripts"),s(`
  plugins     List installed plugins.
  scan        `),n("span",{class:"token punctuation"},"["),s("Scan"),n("span",{class:"token punctuation"},"]"),s("         Scan to get detailed security testing results: Visit https://saf.mitre.org/"),n("span",{class:"token comment"},"#/validate to explore and run inspec profiles"),s(`
  supplement  `),n("span",{class:"token punctuation"},"["),s("Supplement"),n("span",{class:"token punctuation"},"]"),s("   Supplement "),n("span",{class:"token punctuation"},"("),s("ex. "),n("span",{class:"token builtin class-name"},"read"),s(" or modify"),n("span",{class:"token punctuation"},")"),s(" elements that provide contextual information "),n("span",{class:"token keyword"},"in"),s(" the Heimdall Data Format results JSON "),n("span",{class:"token function"},"file"),s(" such as "),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("passthrough"),n("span",{class:"token variable"},"`")]),s(` or
              `),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),s("target"),n("span",{class:"token variable"},"`")]),s(`
  validate    `),n("span",{class:"token punctuation"},"["),s("Validate"),n("span",{class:"token punctuation"},"]"),s(`     Verify pipeline thresholds
  view        `),n("span",{class:"token punctuation"},"["),s("Visualize"),n("span",{class:"token punctuation"},"]"),s(`    Identify overall security status and deep-dive to solve specific security defects

COMMANDS
  convert   The generic convert `),n("span",{class:"token builtin class-name"},"command"),s(" translates any supported file-based security results "),n("span",{class:"token builtin class-name"},"set"),s(` into the Heimdall Data Format
  harden    Visit https://saf.mitre.org/`),n("span",{class:"token comment"},"#/harden to explore and run hardening scripts"),s(`
  heimdall  Run an instance of Heimdall Lite to visualize your data
  `),n("span",{class:"token builtin class-name"},"help"),s("      Display "),n("span",{class:"token builtin class-name"},"help"),s(),n("span",{class:"token keyword"},"for"),s(` saf.
  plugins   List installed plugins.
  scan      Visit https://saf.mitre.org/`),n("span",{class:"token comment"},"#/validate to explore and run inspec profiles"),s(`
  summary   Get a quick compliance overview of an HDF `),n("span",{class:"token function"},"file"),s(`
  version
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=l(`<p>You can get more information on a specific topic by running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>saf <span class="token punctuation">[</span>TOPIC<span class="token punctuation">]</span> <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="updating-the-workflow-file" tabindex="-1"><a class="header-anchor" href="#updating-the-workflow-file" aria-hidden="true">#</a> Updating the Workflow File</h3><p>Let&#39;s add two steps to our pipeline to use the SAF CLI to understand our InSpec scan results before we verify them against a threshold.</p>`,4),S=n("code",null,"pipeline.yml",-1),C=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VERIFY "),n("span",{class:"token punctuation"},"-"),s(` Display our results summary 
  `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(` mitre/saf_action@v1
  `),n("span",{class:"token key atrule"},"with"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"command_string"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"view summary -i results/pipeline_run.json"'),s(`

`),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VERIFY "),n("span",{class:"token punctuation"},"-"),s(` Ensure the scan meets our results threshold
  `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(" mitre/saf_action@v1             "),n("span",{class:"token comment"},"# check if the pipeline passes our defined threshold"),s(`
  `),n("span",{class:"token key atrule"},"with"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"command_string"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"validate threshold -i results/pipeline_run.json -F threshold.yml"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(` Demo Security Validation Gold Image Pipeline

`),n("span",{class:"token key atrule"},"on"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"push"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"branches"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"# trigger this action on any push to main branch"),s(`

`),n("span",{class:"token key atrule"},"jobs"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"gold-image"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(` Gold Image NGINX
    `),n("span",{class:"token key atrule"},"runs-on"),n("span",{class:"token punctuation"},":"),s(" ubuntu"),n("span",{class:"token punctuation"},"-"),n("span",{class:"token number"},"20.04"),s(`
    `),n("span",{class:"token key atrule"},"env"),n("span",{class:"token punctuation"},":"),s(`
      `),n("span",{class:"token key atrule"},"CHEF_LICENSE"),n("span",{class:"token punctuation"},":"),s(" accept "),n("span",{class:"token comment"},"# so that we can use InSpec without manually accepting the license"),s(`
      `),n("span",{class:"token key atrule"},"PROFILE"),n("span",{class:"token punctuation"},":"),s(" my_nginx "),n("span",{class:"token comment"},"# path to our profile"),s(`
    `),n("span",{class:"token key atrule"},"steps"),n("span",{class:"token punctuation"},":"),s(`
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" PREP "),n("span",{class:"token punctuation"},"-"),s(" Update runner "),n("span",{class:"token comment"},"# updating all dependencies is always a good start"),s(`
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(" sudo apt"),n("span",{class:"token punctuation"},"-"),s(`get update

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" PREP "),n("span",{class:"token punctuation"},"-"),s(` Install InSpec executable 
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(" curl https"),n("span",{class:"token punctuation"},":"),s("//omnitruck.chef.io/install.sh "),n("span",{class:"token punctuation"},"|"),s(" sudo bash "),n("span",{class:"token punctuation"},"-"),s("s "),n("span",{class:"token punctuation"},"-"),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token punctuation"},"-"),s("P inspec "),n("span",{class:"token punctuation"},"-"),s(`v 5

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" PREP "),n("span",{class:"token punctuation"},"-"),s(" Check out this repository  "),n("span",{class:"token comment"},"# because that's where our profile is!"),s(`
        `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(` actions/checkout@v3
        
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" LINT "),n("span",{class:"token punctuation"},"-"),s(" Run InSpec Check           "),n("span",{class:"token comment"},"# double-check that we don't have any serious issues in our profile code"),s(`
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(` inspec check $PROFILE

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" DEPLOY "),n("span",{class:"token punctuation"},"-"),s(` Run a Docker container from nginx
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(" docker run "),n("span",{class:"token punctuation"},"-"),s("dit "),n("span",{class:"token punctuation"},"-"),n("span",{class:"token punctuation"},"-"),s("name nginx nginx"),n("span",{class:"token punctuation"},":"),s(`latest

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" DEPLOY "),n("span",{class:"token punctuation"},"-"),s(` Install Python for our nginx container
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token scalar string"},`
          docker exec nginx apt-get update -y
          docker exec nginx apt-get install -y python3`),s(`

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" HARDEN "),n("span",{class:"token punctuation"},"-"),s(` Fetch Ansible role
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token scalar string"},`
          git clone --branch docker https://github.com/mitre/ansible-nginx-stigready-hardening.git || true
          chmod 755 ansible-nginx-stigready-hardening`),s(`

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" HARDEN "),n("span",{class:"token punctuation"},"-"),s(` Fetch Ansible requirements
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(" ansible"),n("span",{class:"token punctuation"},"-"),s("galaxy install "),n("span",{class:"token punctuation"},"-"),s("r ansible"),n("span",{class:"token punctuation"},"-"),s("nginx"),n("span",{class:"token punctuation"},"-"),s("stigready"),n("span",{class:"token punctuation"},"-"),s(`hardening/requirements.yml

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" HARDEN "),n("span",{class:"token punctuation"},"-"),s(` Run Ansible hardening
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(" ansible"),n("span",{class:"token punctuation"},"-"),s("playbook "),n("span",{class:"token punctuation"},"-"),n("span",{class:"token punctuation"},"-"),s("inventory=nginx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"-"),n("span",{class:"token punctuation"},"-"),s("connection=docker ansible"),n("span",{class:"token punctuation"},"-"),s("nginx"),n("span",{class:"token punctuation"},"-"),s("stigready"),n("span",{class:"token punctuation"},"-"),s("hardening/hardening"),n("span",{class:"token punctuation"},"-"),s(`playbook.yml
        
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VALIDATE "),n("span",{class:"token punctuation"},"-"),s(` Run InSpec
        `),n("span",{class:"token key atrule"},"continue-on-error"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean important"},"true"),s("                 "),n("span",{class:"token comment"},"# we dont want to stop if our InSpec run finds failures, we want to continue and record the result"),s(`
        `),n("span",{class:"token key atrule"},"run"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token scalar string"},`
          inspec exec $PROFILE \\
          --input-file=$PROFILE/inputs.yml \\
          --target docker://nginx \\
          --reporter cli json:results/pipeline_run.json`),s(`

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VALIDATE "),n("span",{class:"token punctuation"},"-"),s(" Save Test Result JSON  "),n("span",{class:"token comment"},"# save our results to the pipeline artifacts, even if the InSpec run found failing tests"),s(`
        `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(" actions/upload"),n("span",{class:"token punctuation"},"-"),s(`artifact@v3
        `),n("span",{class:"token key atrule"},"with"),n("span",{class:"token punctuation"},":"),s(`
          `),n("span",{class:"token key atrule"},"path"),n("span",{class:"token punctuation"},":"),s(` results/pipeline_run.json

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VERIFY "),n("span",{class:"token punctuation"},"-"),s(` Display our results summary 
        `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(` mitre/saf_action@v1
        `),n("span",{class:"token key atrule"},"with"),n("span",{class:"token punctuation"},":"),s(`
          `),n("span",{class:"token key atrule"},"command_string"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"view summary -i results/pipeline_run.json"'),s(`

      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" VERIFY "),n("span",{class:"token punctuation"},"-"),s(` Ensure the scan meets our results threshold
        `),n("span",{class:"token key atrule"},"uses"),n("span",{class:"token punctuation"},":"),s(" mitre/saf_action@v1             "),n("span",{class:"token comment"},"# check if the pipeline passes our defined threshold"),s(`
        `),n("span",{class:"token key atrule"},"with"),n("span",{class:"token punctuation"},":"),s(`
          `),n("span",{class:"token key atrule"},"command_string"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"validate threshold -i results/pipeline_run.json -F threshold.yml"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,"A few things to note here:",-1),L={href:"https://github.com/mitre/saf_action",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[s("We added the "),n("code",null,"summary"),s(" step because it will print us a concise summary inside the pipeline job view itself. That command takes one file argument; the results file we want to summarize.")],-1),R=n("li",null,[s("The "),n("code",null,"validate threshold"),s(" command, however, needs two files -- one is our report file as usual, and the other is a "),n("strong",null,"threshold file"),s(".")],-1),P=l(`<h4 id="threshold-files" tabindex="-1"><a class="header-anchor" href="#threshold-files" aria-hidden="true">#</a> Threshold Files</h4><p>Threshold files are what we use to define what &quot;passing&quot; means for our pipeline, since like we said earlier, it&#39;s more complicated than failing the pipeline on a failed test.</p><p>Consider the following sample threshold file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># threshold.yml file</span>
<span class="token key atrule">compliance</span><span class="token punctuation">:</span>
  <span class="token key atrule">min</span><span class="token punctuation">:</span> <span class="token number">80</span>
<span class="token key atrule">passed</span><span class="token punctuation">:</span>
  <span class="token key atrule">total</span><span class="token punctuation">:</span>
    <span class="token key atrule">min</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token key atrule">failed</span><span class="token punctuation">:</span>
  <span class="token key atrule">total</span><span class="token punctuation">:</span>
    <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This file specifies that we require a <em>minimum of 80% of the tests to pass.</em> We also specify that <em>at least one of them should pass, and that at maximum two of them can fail.</em></p>`,5),V={class:"hint-container info"},N=n("p",{class:"hint-container-title"},"Threshold Files Options",-1),O={href:"https://github.com/mitre/saf/wiki/Validation-with-Thresholds",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,[n("em",null,"NOTE: You can name the threshold file something else or put it in a different location. We specify the name and location only for convenience.")],-1),j=l(`<p>This is a sample pipeline, so we are not too worried about being very stringent. For now, let&#39;s settle for running the pipeline with no <em>errors</em> (that is, as long as each test runs, we do not care if it passed or failed, but a source code error should still fail the pipeline).</p><p>Create a new file called <code>threshold.yml</code> in the main directory to specify the threshold for acceptable test results:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">error</span><span class="token punctuation">:</span>
  <span class="token key atrule">total</span><span class="token punctuation">:</span>
    <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">How could we change this threshold file to ensure that the pipeline run will fail?</p></div><p>And with that, we have a complete pipeline file. Let&#39;s commit our changes and see what happens.</p>`,5),q=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"git"),s(),n("span",{class:"token function"},"add"),s(` .github
`),n("span",{class:"token function"},"git"),s(" commit "),n("span",{class:"token parameter variable"},"-s"),s(),n("span",{class:"token parameter variable"},"-m"),s(),n("span",{class:"token string"},'"finishing the pipeline"'),s(`
`),n("span",{class:"token function"},"git"),s(` push origin main
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("$"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"git"),s(),n("span",{class:"token function"},"add"),s(),n("span",{class:"token builtin class-name"},"."),s(`
$`),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"git"),s(" commit "),n("span",{class:"token parameter variable"},"-s"),s(),n("span",{class:"token parameter variable"},"-m"),s(),n("span",{class:"token string"},'"finishing the pipeline"'),s(`
`),n("span",{class:"token punctuation"},"["),s("main e796abd"),n("span",{class:"token punctuation"},"]"),s(` finishing the pipeline
 `),n("span",{class:"token number"},"2"),s(" files changed, "),n("span",{class:"token number"},"14"),s(" insertions"),n("span",{class:"token punctuation"},"("),s("+"),n("span",{class:"token punctuation"},")"),s(", "),n("span",{class:"token number"},"1"),s(" deletion"),n("span",{class:"token punctuation"},"("),s("-"),n("span",{class:"token punctuation"},")"),s(`
 create mode `),n("span",{class:"token number"},"100644"),s(` threshold.yml
$`),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"git"),s(` push origin main
Enumerating objects: `),n("span",{class:"token number"},"10"),s(`, done.
Counting objects: `),n("span",{class:"token number"},"100"),s("% "),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),s("/10"),n("span",{class:"token punctuation"},")"),s(`, done.
Delta compression using up to `),n("span",{class:"token number"},"2"),s(` threads
Compressing objects: `),n("span",{class:"token number"},"100"),s("% "),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s("/3"),n("span",{class:"token punctuation"},")"),s(`, done.
Writing objects: `),n("span",{class:"token number"},"100"),s("% "),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"6"),s("/6"),n("span",{class:"token punctuation"},")"),s(", "),n("span",{class:"token number"},"720"),s(" bytes "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token number"},"720.00"),s(` KiB/s, done.
Total `),n("span",{class:"token number"},"6"),s(),n("span",{class:"token punctuation"},"("),s("delta "),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(", reused "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"("),s("delta "),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(", pack-reused "),n("span",{class:"token number"},"0"),s(`
remote: Resolving deltas: `),n("span",{class:"token number"},"100"),s("% "),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s("/2"),n("span",{class:"token punctuation"},")"),s(", completed with "),n("span",{class:"token number"},"2"),s(),n("span",{class:"token builtin class-name"},"local"),s(` objects.
To https://github.com/wdower/saf-training-lab-environment
   c4d9c67`),n("span",{class:"token punctuation"},".."),s("e796abd  main -"),n("span",{class:"token operator"},">"),s(` main
$`),n("span",{class:"token operator"},">"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=l('<p>Let&#39;s hop back to our browser and take a look at the output:</p><figure><img src="'+r+'" alt="The Completed Pipeline Run" tabindex="0" loading="lazy"><figcaption>The Completed Pipeline Run</figcaption></figure><p>There we go! All validation tests passed!</p><p>Note in the SAF CLI Summary step, we get a simple YAML output summary of the InSpec scan:</p><figure><img src="'+h+`" alt="The Summary" tabindex="0" loading="lazy"><figcaption>The Summary</figcaption></figure><p>We see five critical tests (remember how we set them all to <code>impact 1.0</code>?) passing, and no failures:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">profileName</span><span class="token punctuation">:</span> my_nginx
  <span class="token key atrule">resultSets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> pipeline_run.json
  <span class="token key atrule">compliance</span><span class="token punctuation">:</span> <span class="token number">100</span>
  <span class="token key atrule">passed</span><span class="token punctuation">:</span>
    <span class="token key atrule">critical</span><span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token key atrule">high</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">low</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">total</span><span class="token punctuation">:</span> <span class="token number">5</span>
  <span class="token key atrule">failed</span><span class="token punctuation">:</span>
    <span class="token key atrule">critical</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">high</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">low</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">total</span><span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token key atrule">skipped</span><span class="token punctuation">:</span>
    <span class="token key atrule">critical</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">high</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">low</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">total</span><span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token key atrule">error</span><span class="token punctuation">:</span>
    <span class="token key atrule">critical</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">high</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">low</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">total</span><span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token key atrule">no_impact</span><span class="token punctuation">:</span>
    <span class="token key atrule">none</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">total</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note also that our test report is avaiable as an artifact from the overall pipeline run summary view now:</p><figure><img src="`+r+'" alt="The Artifact" tabindex="0" loading="lazy"><figcaption>The Artifact</figcaption></figure><p>From here, we can download that file and drop it off in somehting like Heimdall or feed into some other security process at our leisure (or we can add a pipeline step to do that for us!).</p><p>In a real use case, if our pipeline passed, we would next save our bonafide hardened image to a secure registry where it could be distributed to developers. If the pipeline did not pass, we would have already collected data describing why, in the form of InSpec scan reports that we save as artifacts.</p>',11);function G(M,Y){const o=u("ExternalLinkIcon"),p=u("RouterLink"),c=u("CodeTabs");return m(),k("div",null,[v,n("p",null,[s("The "),n("a",f,[s("SAF CLI"),i(o)]),s(' is one the tool that the SAF supports to help automate security validation. It is our "kitchen-sink" utility for pipelines. If you took the '),i(p,{to:"/courses/user/"},{default:e(()=>[s("SAF User Class")]),_:1}),s(", you are already familiar with the SAF CLI's "),i(p,{to:"/courses/user/12.html"},{default:e(()=>[s("attestation")]),_:1}),s(" function.")]),y,g,n("p",null,[s("Some SAF CLI capabilities are listed in this diagram, but you can see all of them on the "),n("a",w,[s("SAF CLI documentation"),i(o)]),s(".")]),_,i(c,{id:"33",data:[{id:"Command"},{id:"Output"}]},{title0:e(({value:a,isActive:t})=>[s("Command")]),title1:e(({value:a,isActive:t})=>[s("Output")]),tab0:e(({value:a,isActive:t})=>[x]),tab1:e(({value:a,isActive:t})=>[A]),_:1}),I,i(c,{id:"51",data:[{id:"Adding Verify Steps"},{id:"<code v-pre>pipeline.yml</code> after adding verify steps"}],"tab-id":"shell"},{title0:e(({value:a,isActive:t})=>[s("Adding Verify Steps")]),title1:e(({value:a,isActive:t})=>[S,s(" after adding verify steps")]),tab0:e(({value:a,isActive:t})=>[C]),tab1:e(({value:a,isActive:t})=>[T]),_:1},8,["data"]),F,n("ul",null,[n("li",null,[s("Both steps are using the "),n("a",L,[s("SAF CLI GitHub Action"),i(o)]),s(". This way, we don't need to install it directly on the runner; we can just pass in the command string.")]),E,R]),P,n("div",V,[N,n("p",null,[s("To make more specific or detailed thresholds, check out "),n("a",O,[s("this documentation on generating theshold files"),i(o)]),s(".")]),D]),j,i(c,{id:"112",data:[{id:"Committing And Pushing Code"},{id:"Output of Pushing Code"}],"tab-id":"shell"},{title0:e(({value:a,isActive:t})=>[s("Committing And Pushing Code")]),title1:e(({value:a,isActive:t})=>[s("Output of Pushing Code")]),tab0:e(({value:a,isActive:t})=>[q]),tab1:e(({value:a,isActive:t})=>[H]),_:1}),W])}const B=d(b,[["render",G],["__file","11.html.vue"]]);export{B as default};
