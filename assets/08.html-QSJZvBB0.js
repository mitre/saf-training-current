import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o as c,c as u,d as e,e as t,b as i,w as s,f as r}from"./app-WeARUK1X.js";const h="/saf-training-current/assets/pipeline_diagram-LfWeMOl2.png",d={},p=e("h2",{id:"ci-cd-pipelines",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ci-cd-pipelines","aria-hidden":"true"},"#"),t(" CI/CD Pipelines")],-1),f=e("figure",null,[e("img",{src:h,alt:"A Pipeline Diagram (GitHub Action)",tabindex:"0",loading:"lazy"}),e("figcaption",null,"A Pipeline Diagram (GitHub Action)")],-1),m=e("p",null,"Now that we have a solid grasp on InSpec, let's discuss the bigger picture -- how we can use the validation content we wrote inside a real test case pipeline.",-1),g=r('<h3 id="background" tabindex="-1"><a class="header-anchor" href="#background" aria-hidden="true">#</a> Background</h3><p>Software developers create pipelines for the same reason that factory designers create assembly lines. They break processes into logical units and make them repeatable, consistent, and automated.</p><p>Pipelines also enable several paradigms in modern DevSecOps development, including continuous integration and continuous delivery (CD).</p><p><strong>Continuous Integration (CI)</strong> is the practice of requiring all changes to a codebase to pass a test suite before they are committed. CI is implemented on a codebase to make sure that any time a bug is introduced to a codebase, it is caught and corrected as soon as someone tries to commit it, instead of months or years later in operations when it is much more difficult to fix.</p><p><strong>Continuous Delivery</strong> is the practice of automatically delivering software (such as, for example, by pushing code to live deployment) once it passes a test suite. This is a core practice of DevSecOps -- code should be developed incrementally and small units of functionality should be delivered as soon as they are complete and pass all tests.</p><p>A fully mature DevSecOps pipeline will implement both strategies. Note that <em>both CI and CD both presuppose that you have a high-quality, easy to use test suite available</em>. We will create our demo pipeline using an InSpec profile as our test suite.</p><h2 id="pipeline-orchestrators" tabindex="-1"><a class="header-anchor" href="#pipeline-orchestrators" aria-hidden="true">#</a> Pipeline Orchestrators</h2>',7),b={href:"https://docs.github.com/en/actions",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"While we are using GitHub Actions as the simplest option for this class, there are many other pipeline orchestration tools. Common tools include:",-1),_={href:"https://docs.gitlab.com/ee/ci/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.drone.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://bitbucket.org/product/features/pipelines",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jenkins.io/",target:"_blank",rel:"noopener noreferrer"},I=r('<div class="hint-container note"><p class="hint-container-title">Have you used pipeline orchestration software other than that mentioned here?</p></div><p>Most of the general concepts discusses in this portion of the class will be covered by any pipeline orchestrator tool, though they wil likely have different terminology for individual features.</p><h2 id="our-use-case" tabindex="-1"><a class="header-anchor" href="#our-use-case" aria-hidden="true">#</a> Our Use Case</h2><p>Let&#39;s learn how to build pipelines by taking on the role of a developer who needs to create a pipeline for a hardened NGINX container image. We can borrow the InSpec profile we&#39;ve already written for our container to make sure that any time we update the container image, we do not accidentally break any security controls.</p><p>We need to:</p><ul><li>Deploy a test NGINX container image</li><li>Harden the container image</li><li>Run a validation scan (our InSpec profile) against the test system</li><li>Verify that the hardened image is, in fact, hardened to our satisfaction using the validation results from the test system</li></ul><p>Real-world pipelines are often used this way in a <em>gold image pipeline,</em> which run on a defined frequency to continuously deliver a secure, updated machine image that can be used as a base for further applications. In this use case, we would take the hardened and validated image we produced as part of the pipeline and save it as our new gold image. This way, developers can grab a &quot;known-good&quot; image to host their applications without having to configure or keep it up to date themselves.</p><h2 id="pipeline-tasks" tabindex="-1"><a class="header-anchor" href="#pipeline-tasks" aria-hidden="true">#</a> Pipeline Tasks</h2><p>Pipelines are conceptually broken down into a series of individual tasks. The tasks we need to complete in our pipeline include:</p>',9),x=e("li",null,"Prep - configure our runner for later work (in our case, make sure InSpec is installed and ready to go)",-1),C=e("li",null,[t("Lint - make sure code passes style requirements (in our case, "),e("code",null,"inspec check ."),t(")")],-1),A=e("li",null,"Deploy the test suite (in our case, an NGINX container we want to use as a test system)",-1),S=e("li",null,"Validate - check configuration (in our case, run InSpec against our test system and generate a report)",-1),G=e("li",null,"Verify - confirm if the validation run passed our expectations (in our case, use the SAF CLI to check that the Validation report met our threshold)",-1),D=e("li",null,"Do something with results - e.g. publish our image if it met our expectations and passed the tests",-1),H=e("p",null,[t("GitHub Actions organizes the tasks inside a pipeline into "),e("strong",null,"jobs"),t(". A given pipeline can trigger multiple jobs, but for our sample gold image pipeline we really only need one for storing all of our tasks.")],-1),N=e("h3",{id:"runners",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#runners","aria-hidden":"true"},"#"),t(" Runners")],-1),L=e("p",null,[t("Pipeline orchestrators all have some system for selecting a "),e("strong",null,"runner"),t(" node that will be assigned to handle the tasks we define for the pipeline. Runners are any system -- containers or full virtual machines in a cloud environment -- that handle the actual task execution for a pipeline.")],-1),P={href:"https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners",target:"_blank",rel:"noopener noreferrer"},W=e("p",null,"In the next sections we will create a GitHub Action workflow to handle these jobs for us. We will commit the workflow file to our repository and watch it work!",-1);function V(T,j){const o=a("RouterLink"),n=a("ExternalLinkIcon");return c(),u("div",null,[p,f,m,e("p",null,[t("If you have taken the "),i(o,{to:"/courses/user/"},{default:s(()=>[t("SAF User")]),_:1}),t(" class, you will be familiar with many of the activities we will be doing as part of the sample pipeline in the next few sections, including using Ansible to harden a test image, validating it with InSpec, and using the SAF CLI to assess our results. We will be bundling all those activities together into a pipeline workflow file so that we can automate them.")]),g,e("p",null,[t("We will be building our sample pipeline using "),e("a",b,[t("GitHub Actions"),i(n)]),t(", the pipeline orchestration tool that is built into GitHub. We are using this feature because it is free to use unless we exceed usage limits, and because we can write up a pipeline workflow file right from our GitHub Codespaces lab environment.")]),w,e("ul",null,[e("li",null,[t("GitLab's GitLab "),e("a",_,[t("CI/CD"),i(n)])]),e("li",null,[e("a",y,[t("DroneCI"),i(n)])]),e("li",null,[t("Atlassian's "),e("a",k,[t("BitBucket Pipelines"),i(n)])]),e("li",null,[e("a",v,[t("Jenkins"),i(n)])])]),I,e("ul",null,[x,C,A,e("li",null,[t("Harden the test suite (we will use Ansible like we do in the "),i(o,{to:"/courses/user/10.html"},{default:s(()=>[t("SAF User class")]),_:1}),t(")")]),S,G,D]),H,N,L,e("p",null,[t("In the case of GitHub actions, when we trigger a pipeline, GitHub by default sends the jobs to its cloud environment to hosted runner nodes. The operating system of the runner for a particular job can be specified in the workflow file. See the "),e("a",P,[t("docs"),i(n)]),t(" for details.")]),W])}const O=l(d,[["render",V],["__file","08.html.vue"]]);export{O as default};
