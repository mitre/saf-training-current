import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as u,c as h,a as l,d as e,b as o,w as a,e as n,f as i}from"./app-WeARUK1X.js";const m={},b=e("h2",{id:"generating-inspec-results",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#generating-inspec-results","aria-hidden":"true"},"#"),n(" Generating InSpec Results")],-1),g=e("h3",{id:"try-it-out",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#try-it-out","aria-hidden":"true"},"#"),n(" Try it out!")],-1),v=e("p",null,[n("InSpec allows you to send your test results to one or more "),e("em",null,"reporters"),n(", or output formats. The following command outputs results to both the terminal ("),e("code",null,"cli"),n(") and to a JSON report file ("),e("code",null,"json:baseline_output.json"),n(").")],-1),f=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> my_nginx <span class="token parameter variable">-t</span> docker://nginx <span class="token parameter variable">--reporter</span> cli json:baseline_output.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="generating-good-report-filenames-in-practice" tabindex="-1"><a class="header-anchor" href="#generating-good-report-filenames-in-practice" aria-hidden="true">#</a> Generating good report filenames in practice</h3><p>When using InSpec in practice, most users aggregate report files from multiple systems over time, so we recommend that you generate reports that specify:</p><ul><li>the target they were run against</li><li>a timestamp</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> my_nginx <span class="token parameter variable">--reporter</span> json:nginx-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span><span class="token variable">)</span></span>.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here we add a bash <code>eval</code> (the <code>$(date +&quot;%Y-%m-%d-%H-%M-%S&quot;)</code>) to our filename when we invoke <code>inspec exec</code>. Now we can run tests multiple times with the same command and get a different filename each time.</p><div class="hint-container caution"><p class="hint-container-title">Caution</p><p>Note that if you save InSpec results to a file (such as with the <code>json</code> reporter), and then re-run the same command, you will overwrite the original contents of that file with the more recent results. Be sure that all of your reports have unique names.</p></div><h3 id="additional-reporter-examples-for-reference" tabindex="-1"><a class="header-anchor" href="#additional-reporter-examples-for-reference" aria-hidden="true">#</a> Additional Reporter Examples for Reference</h3>`,8),_={class:"hint-container details"},k=e("summary",null,"Output JSON to screen",-1),x=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("inspec "),e("span",{class:"token builtin class-name"},"exec"),n(" my_nginx "),e("span",{class:"token parameter variable"},"--reporter"),n(` json
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),y=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("inspec "),e("span",{class:"token builtin class-name"},"exec"),n(" my_nginx "),e("span",{class:"token parameter variable"},"--reporter"),n(` json:-
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),w={class:"hint-container details"},j=e("summary",null,"Output YAML to screen",-1),S=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("inspec "),e("span",{class:"token builtin class-name"},"exec"),n(" my_nginx "),e("span",{class:"token parameter variable"},"--reporter"),n(` yaml
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),N=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("inspec "),e("span",{class:"token builtin class-name"},"exec"),n(" my_nginx "),e("span",{class:"token parameter variable"},"--reporter"),n(` yaml:-
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),q=i(`<details class="hint-container details"><summary>Output to screen and to a JSON file</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> my_nginx <span class="token parameter variable">--reporter</span> cli json:tmp/output.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Output only to files - a junit and HTML file</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> my_nginx <span class="token parameter variable">--reporter</span> junit2:tmp/junit.xml html:www/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Output JSON to the terminal and make a junit file</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> my_nginx <span class="token parameter variable">--reporter</span> json junit2:tmp/junit.xml <span class="token operator">|</span> <span class="token function">tee</span> out.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,3),A=i(`<h3 id="using-a-configuration-file-instead-of-the-reporter-flag" tabindex="-1"><a class="header-anchor" href="#using-a-configuration-file-instead-of-the-reporter-flag" aria-hidden="true">#</a> Using a configuration file instead of the --reporter flag</h3><p>InSpec also lets you capture all of these reporter options in a configuration file:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;reporter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;cli&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;stdout&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;json&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tmp/output.json&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;stdout&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),I={href:"https://docs.chef.io/inspec/config/",target:"_blank",rel:"noopener noreferrer"},T=i('<h3 id="supported-reporters" tabindex="-1"><a class="header-anchor" href="#supported-reporters" aria-hidden="true">#</a> Supported Reporters</h3><p>The following are supported reporters:</p><ul><li>cli</li><li>json</li><li>json-min</li><li>yaml</li><li>documentation</li><li>junit2</li><li>progress</li><li>progress-bar</li><li>json-rspec</li><li>html2</li><li>automate</li><li>json-automate</li></ul>',3),C={href:"https://www.inspec.io/docs/reference/reporters/",target:"_blank",rel:"noopener noreferrer"},H=i(`<details class="hint-container details"><summary>Enhanced Outcomes</summary><p>InSpec includes the <code>--enhanced-outcomes</code> flag to enrich the output format slightly if more detail is needed.</p><p>When this flag is passed, the control level status outcomes of the profile execution are <code>Passed</code>, <code>Failed</code>, <code>Not Applicable (N/A)</code>, <code>Not Reviewed (N/R)</code>, or <code>Error (ERR)</code>.</p></details><h3 id="running-profiles-from-network-locations" tabindex="-1"><a class="header-anchor" href="#running-profiles-from-network-locations" aria-hidden="true">#</a> Running Profiles from Network Locations</h3><p>So far, we have been executing InSpec profiles that we have written ourselves and saved to the local machine. InSpec also gives you the ability to execute a profile that lives on the other end of an HTTP/S link or a <code>.git</code> link.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> https://github.com/mitre/nginx-stigready-baseline <span class="token parameter variable">-t</span> docker://nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),O={class:"hint-container tip"},R=e("p",{class:"hint-container-title"},"Pulling Profiles from the Network",-1),G=e("p",null,"We suggest that, when possible, you host your profile code on a version control system accessible from the internet (e.g. GitHub). That way, you are always running an up-to-date version of the code.",-1),Y=e("code",null,"main",-1),E={href:"https://docs.github.com/en/repositories/releasing-projects-on-github/linking-to-releases",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"inspec exec",-1),P={class:"hint-container warning"},B=i(`<p class="hint-container-title">Wait, what if I can&#39;t publish to GitHub?</p><p>Not everyone can open source their code, or make it available on the open Internet. Your organization or environment may be more suited to using a private code repository (e.g. GitLab or BitBucket) to store profiles. InSpec supports passing authentication tokens as part of profile locations:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> https://API_TOKEN@gitlab.supersecret.com/profiles/inspec_baseline.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),M={href:"https://docs.chef.io/inspec/cli/#exec",target:"_blank",rel:"noopener noreferrer"},V=i(`<h3 id="practice-running-inspec-using-a-profile-from-github" tabindex="-1"><a class="header-anchor" href="#practice-running-inspec-using-a-profile-from-github" aria-hidden="true">#</a> Practice Running InSpec Using a Profile From GitHub</h3><p>Let&#39;s try running an already-complete profile and generating a report.</p><p>The following command will run the SAF Validation Library&#39;s NGINX baseline profile from MITRE GitHub, and use the reporter to output a json file. You will need this JSON file for the next section, where we&#39;ll load our results into Heimdall:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> https://github.com/mitre/nginx-stigready-baseline <span class="token parameter variable">-t</span> docker://nginx <span class="token parameter variable">--reporter</span> cli json:nginx-full-baseline-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span><span class="token variable">)</span></span>.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function J(W,F){const c=p("CodeTabs"),r=p("ExternalLinkIcon");return u(),h("div",null,[b,g,v,l(" \nYou can configure the reporter(s) using either the `--json-config` option or the `--reporter` option. While you can configure multiple reporters to write to different files, only one reporter can output to the screen (via stdout). "),f,e("details",_,[k,o(c,{id:"42",data:[{id:"Command"},{id:"Alternative Command"}],"tab-id":"shell"},{title0:a(({value:s,isActive:t})=>[n("Command")]),title1:a(({value:s,isActive:t})=>[n("Alternative Command")]),tab0:a(({value:s,isActive:t})=>[x]),tab1:a(({value:s,isActive:t})=>[y]),_:1})]),e("details",w,[j,o(c,{id:"52",data:[{id:"Command"},{id:"Alternative Command"}],"tab-id":"shell"},{title0:a(({value:s,isActive:t})=>[n("Command")]),title1:a(({value:s,isActive:t})=>[n("Alternative Command")]),tab0:a(({value:s,isActive:t})=>[S]),tab1:a(({value:s,isActive:t})=>[N]),_:1})]),q,l(" How can you list two profiles? That doesn't make sense to me "),l(" ::: tip Flag order\nIf you wish to pass the profiles directly after specifying the reporters, you will need to use the end of options flag `--`:\n```sh\ninspec exec --reporter json junit2:tmp/junit.xml -- profile1 profile2\n```\n::: "),A,e("p",null,[n("You can read more about this at "),e("a",I,[n("https://docs.chef.io/inspec/config/"),o(r)])]),T,e("p",null,[n("You can read more here: "),e("a",C,[n("https://www.inspec.io/docs/reference/reporters/"),o(r)])]),H,e("div",O,[R,G,e("p",null,[n('Note that "an up-to-date version" does not necessarily mean "run the '),Y,n(' branch of the profile as it exists on GitHub." You can make use of releases in your code repository, and then use the link to a stable release ('),e("a",E,[n("GitHub example"),o(r)]),n(") as your input to "),L,n(". This conforms to best practices in automation -- avoid running any code that has not been thoroughly vetted as part of an offical release.")])]),e("div",P,[B,e("p",null,[n("See the "),e("a",M,[n("exec command docs"),o(r)]),n(" for details.")])]),V])}const z=d(m,[["render",J],["__file","08.html.vue"]]);export{z as default};
