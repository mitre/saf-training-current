import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as p,c as d,d as e,e as s,b as o,w as n,f as r}from"./app-WeARUK1X.js";const m={},b=e("h2",{id:"inspec-control-enhancements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inspec-control-enhancements","aria-hidden":"true"},"#"),s(" InSpec Control Enhancements")],-1),h=e("p",null,"You should have the basic idea of how an InSpec test is written and how to leverage InSpec's built-in features to help you write tests quickly and easily. Now let's discuss some of the more powerful features available to you when writing tests to control what output is displayed to the user.",-1),k=e("h3",{id:"rspec",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rspec","aria-hidden":"true"},"#"),s(" RSpec")],-1),v={href:"https://rspec.info/",target:"_blank",rel:"noopener noreferrer"},g=r(`<p>Most of the time you won&#39;t need to use RSpec syntax to write a good test. But we want to show you a few neat tricks you can accomplish with RSpec.</p><h3 id="rspec-explicit-subject" tabindex="-1"><a class="header-anchor" href="#rspec-explicit-subject" aria-hidden="true">#</a> RSpec Explicit Subject</h3><p>We will write a few tests in this section to demonstrate the difference between InSpec&#39;s default syntax and RSpec syntax.</p><p>Let&#39;s pretend we have a new requirement for NGINX:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">6</span>. NGINX&#39;s /etc/nginx directory should not be empty.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(It&#39;s a bit of an odd requirement, but bear with us for the sake of this example.)</p><p>First, we&#39;ll try a test that <em>does not</em> use RSpec syntax to illustrate the problem we want to solve:</p>`,7),w=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("control "),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Requirement 6'")]),s(),e("span",{class:"token keyword"},"do"),s(`
  impact `),e("span",{class:"token number"},"1.0"),s(`
  title `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Checking that /etc/nginx does not return empty'")]),s(`
  desc `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Let\\'s do this the ugly way.'")]),s(`
  describe command`),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'ls -al'")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("stdout"),e("span",{class:"token punctuation"},"."),s("strip "),e("span",{class:"token keyword"},"do"),s(`
    it `),e("span",{class:"token punctuation"},"{"),s(" should_not be_empty "),e("span",{class:"token punctuation"},"}"),s(`
  `),e("span",{class:"token keyword"},"end"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),x=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("  ✔  Requirement "),e("span",{class:"token number"},"6"),s(": Checking that /etc/nginx does not "),e("span",{class:"token builtin class-name"},"return"),s(` empty
     ✔  total `),e("span",{class:"token number"},"76"),s(`
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(":21 "),e("span",{class:"token builtin class-name"},"."),s(`
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(":21 "),e("span",{class:"token punctuation"},".."),s(`
     -rwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"0"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 .dockerenv
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"7"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 bin -"),e("span",{class:"token operator"},">"),s(` usr/bin
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Sep "),e("span",{class:"token number"},"29"),s(),e("span",{class:"token number"},"20"),s(`:04 boot
     drwxr-xr-x   `),e("span",{class:"token number"},"5"),s(" root root  "),e("span",{class:"token number"},"360"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 dev
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"1"),s(` 05:12 docker-entrypoint.d
     -rwxrwxr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"1620"),s(" Nov  "),e("span",{class:"token number"},"1"),s(` 05:11 docker-entrypoint.sh
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 etc
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Sep "),e("span",{class:"token number"},"29"),s(),e("span",{class:"token number"},"20"),s(`:04 home
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"7"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 lib -"),e("span",{class:"token operator"},">"),s(` usr/lib
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"9"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 lib32 -"),e("span",{class:"token operator"},">"),s(` usr/lib32
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"9"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 lib64 -"),e("span",{class:"token operator"},">"),s(` usr/lib64
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root   "),e("span",{class:"token number"},"10"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 libx32 -"),e("span",{class:"token operator"},">"),s(` usr/libx32
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 media
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 mnt
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 opt
     dr-xr-xr-x `),e("span",{class:"token number"},"228"),s(" root root    "),e("span",{class:"token number"},"0"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 proc
     drwx------   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 root
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 run
     lrwxrwxrwx   `),e("span",{class:"token number"},"1"),s(" root root    "),e("span",{class:"token number"},"8"),s(" Oct "),e("span",{class:"token number"},"30"),s(" 00:00 sbin -"),e("span",{class:"token operator"},">"),s(` usr/sbin
     drwxr-xr-x   `),e("span",{class:"token number"},"2"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 srv
     dr-xr-xr-x  `),e("span",{class:"token number"},"12"),s(" root root    "),e("span",{class:"token number"},"0"),s(" Nov  "),e("span",{class:"token number"},"8"),s(),e("span",{class:"token number"},"20"),s(`:21 sys
     drwxrwxrwt   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Nov  "),e("span",{class:"token number"},"1"),s(` 05:12 tmp
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 usr
     drwxr-xr-x   `),e("span",{class:"token number"},"1"),s(" root root "),e("span",{class:"token number"},"4096"),s(" Oct "),e("span",{class:"token number"},"30"),s(` 00:00 var is expected not to be empty
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),f=e("p",null,[s("Well. . . it "),e("em",null,"sort of"),s(" works.")],-1),y=e("p",null,`Notice how much output InSpec printed here to answer the simple question of "did this command return empty?" Imagine if we had done this on a directory with many files in it. We'd just be cluttering up the screen (and our report files).`,-1),_=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"Wait, couldn't we have just used the directory resource for this?"),e("p",null,[s(`Correct. That would have been a much better way of doing this, and illustrates the general principle of "don't use raw shell commands with the `),e("code",null,"command"),s(' resource unless you have to."')]),e("p",null,"We're just doing it this way for the example.")],-1),A={href:"https://relishapp.com/rspec/rspec-core/docs/subject/explicit-subject",target:"_blank",rel:"noopener noreferrer"},S=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("control "),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Requirement 6'")]),s(),e("span",{class:"token keyword"},"do"),s(`
  impact `),e("span",{class:"token number"},"1.0"),s(`
  title `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Checking that /etc/nginx does not return empty'")]),s(`
  desc `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'Let\\'s do this the concise way.'")]),s(`
  describe `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},'"The /etc/nginx directory"')]),s(),e("span",{class:"token keyword"},"do"),s(`
    subject `),e("span",{class:"token punctuation"},"{"),s(" command"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'ls -al'")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("stdout"),e("span",{class:"token punctuation"},"."),s("strip "),e("span",{class:"token punctuation"},"}"),s(`
    it `),e("span",{class:"token punctuation"},"{"),s(" should_not be_empty "),e("span",{class:"token punctuation"},"}"),s(`
  `),e("span",{class:"token keyword"},"end"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),I=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("  ✔  Requirement "),e("span",{class:"token number"},"6"),s(": Checking that /etc/nginx does not "),e("span",{class:"token builtin class-name"},"return"),s(` empty
     ✔  The /etc/nginx directory is expected not to be empty
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),O=r('<p>Much better, right? We can override InSpec&#39;s default output to print a message that is actually useful.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Another benefit to using <code>subject</code> is preventing command output from being stored in the report.</p></div><h3 id="the-should-vs-expect-syntax" tabindex="-1"><a class="header-anchor" href="#the-should-vs-expect-syntax" aria-hidden="true">#</a> The <code>should</code> vs. <code>expect</code> syntax</h3><p>Users familiar with the RSpec testing framework may know that there are two ways to write test statements: <code>should</code> and <code>expect</code>. The RSpec community decided that <code>expect</code> is the preferred syntax.</p><p>InSpec recommends the <code>should</code> syntax as it tends to read more easily. However, there are times when the <code>expect</code> syntax will communicate much more clearly to the end-user. InSpec will continue to support both methods of writing tests.</p><p>Let&#39;s copy the <code>describe</code> shown below directly into our <code>example.rb</code> file (we don&#39;t need to wrap them in a <code>control</code> block for this section). Consider this <code>describe</code> block from your <code>my_nginx</code> profile:</p>',6),C=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("describe file"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'/etc/nginx/nginx.conf'")]),e("span",{class:"token punctuation"},")"),s(),e("span",{class:"token keyword"},"do"),s(`
  it `),e("span",{class:"token punctuation"},"{"),s(" should be_file "),e("span",{class:"token punctuation"},"}"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),q=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s(`File /etc/nginx/nginx.conf
   ✔  should be a `),e("span",{class:"token function"},"file"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("p",null,"This can be re-written with expect syntax.",-1),N=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("describe file"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'/etc/nginx/nginx.conf'")]),e("span",{class:"token punctuation"},")"),s(),e("span",{class:"token keyword"},"do"),s(`
  it `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'should be a file'")]),s(),e("span",{class:"token keyword"},"do"),s(`
    expect`),e("span",{class:"token punctuation"},"("),s("subject"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("to"),e("span",{class:"token punctuation"},"("),s("be_file"),e("span",{class:"token punctuation"},")"),s(`
  `),e("span",{class:"token keyword"},"end"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),R=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s(`File /etc/nginx/nginx.conf
   ✔  should be a `),e("span",{class:"token function"},"file"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),j=e("p",null,"Notice that the output is the same for both the examples above.",-1),W=e("p",null,[s("In addition, you can make use of the "),e("code",null,"subject"),s(" keyword to further control your output if you choose:")],-1),L=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("describe "),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'I can make this any string I want!'")]),s(),e("span",{class:"token keyword"},"do"),s(`
  subject `),e("span",{class:"token punctuation"},"{"),s(" file"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'/etc/nginx/nginx.conf'")]),e("span",{class:"token punctuation"},")"),s(),e("span",{class:"token punctuation"},"}"),s(`
  it `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'should be a file'")]),s(),e("span",{class:"token keyword"},"do"),s(`
    expect`),e("span",{class:"token punctuation"},"("),s("subject"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("to"),e("span",{class:"token punctuation"},"("),s("be_file"),e("span",{class:"token punctuation"},")"),s(`
  `),e("span",{class:"token keyword"},"end"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("  I can "),e("span",{class:"token function"},"make"),s(" this any string I want"),e("span",{class:"token operator"},"!"),s(`
     ✔  should be a `),e("span",{class:"token function"},"file"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"Info"),e("p",null,"Note that all three of the above code examples are running the same test that will pass or fail in the same circumstances — the difference is that the second two examples give more control over the message output that appears to the test performer. If you write tests that will later be executed by other people, you should be sure to write descriptive test output!")],-1),F={href:"https://docs.chef.io/inspec/profiles/",target:"_blank",rel:"noopener noreferrer"},B=e("h3",{id:"expect-syntax-with-a-failure-message",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#expect-syntax-with-a-failure-message","aria-hidden":"true"},"#"),s(),e("code",null,"expect"),s(" syntax with a failure message")],-1),U=e("p",null,[s("In addition to using an "),e("code",null,"expect"),s(" statement, a failure message can be added to provide a meaningful output to the end user.")],-1),V=e("p",null,"Consider this shell access test from your nginx profile:",-1),$=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("describe users"),e("span",{class:"token punctuation"},"."),s("shells"),e("span",{class:"token punctuation"},"("),e("span",{class:"token regex-literal"},[e("span",{class:"token regex"},"/bash/")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("usernames "),e("span",{class:"token keyword"},"do"),s(`
  it `),e("span",{class:"token punctuation"},"{"),s(" should be_in input"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'admin_users'")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"}"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),M=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"root"'),e("span",{class:"token punctuation"},"]"),s(`
     ×  is expected to be `),e("span",{class:"token keyword"},"in"),s(),e("span",{class:"token string"},'"admin"'),s(`
     expected `),e("span",{class:"token variable"},[e("span",{class:"token variable"},"`"),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"root"'),e("span",{class:"token punctuation"},"]"),e("span",{class:"token variable"},"`")]),s(" to be "),e("span",{class:"token keyword"},"in"),s(" the list: "),e("span",{class:"token variable"},[e("span",{class:"token variable"},"`"),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"admin"'),e("span",{class:"token punctuation"},"]"),e("span",{class:"token variable"},"`")]),s(` 
     Diff:
      `),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"root"'),e("span",{class:"token punctuation"},"]"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),D=e("p",null,`Again, this is a valid test, and will return the right pass/fail answer when run, but it is difficult for a person to parse if they were not the author ("The root user is supposed to be 'in' the admin user? What does that mean?!").`,-1),G=e("p",null,"The output of a test like this can be refined to provide a cleaner output to the user. This can be done using a custom failure message:",-1),P=e("div",{class:"language-ruby line-numbers-mode","data-ext":"rb"},[e("pre",{class:"language-ruby"},[e("code",null,[s("non_admin_users "),e("span",{class:"token operator"},"="),s(" users"),e("span",{class:"token punctuation"},"."),s("shells"),e("span",{class:"token punctuation"},"("),e("span",{class:"token regex-literal"},[e("span",{class:"token regex"},"/bash/")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s(`usernames
describe `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},'"Shell access for non-admin users"')]),s(),e("span",{class:"token keyword"},"do"),s(`
  it `),e("span",{class:"token string-literal"},[e("span",{class:"token string"},'"should be removed."')]),s(),e("span",{class:"token keyword"},"do"),s(`
    failure_message `),e("span",{class:"token operator"},"="),s(),e("span",{class:"token string-literal"},[e("span",{class:"token string"},'"These non-admin should not have shell access: '),e("span",{class:"token interpolation"},[e("span",{class:"token delimiter punctuation"},"#{"),e("span",{class:"token content"},[s("non_admin_users"),e("span",{class:"token punctuation"},"."),s("join"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},'", "')]),e("span",{class:"token punctuation"},")")]),e("span",{class:"token delimiter punctuation"},"}")]),e("span",{class:"token string"},'"')]),s(`
    expect`),e("span",{class:"token punctuation"},"("),s("non_admin_users"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),s("to eq"),e("span",{class:"token punctuation"},"("),s("input"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-literal"},[e("span",{class:"token string"},"'admin_users'")]),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),s(` failure_message
  `),e("span",{class:"token keyword"},"end"),s(`
`),e("span",{class:"token keyword"},"end"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),X=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("  Shell access "),e("span",{class:"token keyword"},"for"),s(" non-admin "),e("span",{class:"token function"},"users"),s(`
     ×  should be removed.
     These non-admin should not have shell access: root
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Y=r(`<p>The <code>failure_message</code> variable in the above <code>describe</code> block is assigned a value by pure Ruby assignment. Remember how we said that, since InSpec is built on Ruby, any Ruby syntax will work inside an InSpec test? Ruby&#39;s string formatting syntax (the <code>#{non_admin_users.join(&quot;, &quot;)}</code>) can create a string that lists the users who fail the test by having shell access when they shouldn&#39;t.</p><div class="hint-container tip"><p class="hint-container-title">Writing good failure messages</p><p>The trick to writing useful failure messages is to use Ruby to find the <em>subset</em> of all elements we are testing (here, the users) that actually fail the test. We don&#39;t need to print a statement for <em>every array element we tested;</em> we only need to print a statement that shows the elements that failed.</p></div><h3 id="expect-syntax-and-password-hashes" tabindex="-1"><a class="header-anchor" href="#expect-syntax-and-password-hashes" aria-hidden="true">#</a> <code>Expect</code> syntax and Password Hashes</h3><p>Here&#39;s another example -- we have an InSpec test that checks if passwords are SHA512 hashes.</p><p>As we said, when possible, and when there is a high change of a large set only having a few offending items, attempt to find only those items that could be outside our requirements. If there are none -- wonderful! We met our requirement.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>bad_users <span class="token operator">=</span> inspec<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>where <span class="token punctuation">{</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;*&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!~</span> <span class="token regex-literal"><span class="token regex">/\\$6\\$/</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span>users <span class="token comment"># note that SHA12-encrypted passwords are marked by starting with &#39;$6$&#39; in /etc/shadow</span>

describe <span class="token string-literal"><span class="token string">&#39;Password hashes in /etc/shadow&#39;</span></span> <span class="token keyword">do</span>
  it <span class="token string-literal"><span class="token string">&#39;should only contain SHA512 hashes&#39;</span></span> <span class="token keyword">do</span>
    failure_message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Users without SHA512 hashes: </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">bad_users<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;, &#39;</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span>
    expect<span class="token punctuation">(</span>bad_users<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_empty<span class="token punctuation">,</span> failure_message
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-multiple-resources-for-one-test" tabindex="-1"><a class="header-anchor" href="#using-multiple-resources-for-one-test" aria-hidden="true">#</a> Using Multiple Resources For One Test</h3><p>The <code>file</code> resource is perfect for looking at single files and their properties. However, it does not look at <em>groups</em> of files. To do that, we need to use multiple resources in concert.</p><p>Take a look at this example from a profile for use in AWS virtual machines. We use the <code>command</code> resource to run the <code>find</code> command and then use the <code>file</code> resource to investigate each result. Using multiple resources together is one of the key values InSpec provides, allowing you to get at just the data you need when you need it.</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;find ~/* -type f -maxdepth 0 -xdev&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>split<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>fname<span class="token operator">|</span>  <span class="token comment"># we need to be careful about using &#39;find&#39; --</span>
                                                                            <span class="token comment"># there could be a LOT of output if we are not specific enough with the search!</span>
  describe file<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">do</span>
    its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;owner&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;ec2-user&#39;</span></span> <span class="token punctuation">}</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Avoid Large Sets or &#39;Check Everyone at the Door&#39; Approaches</p><p>For IO intensive (full filesystem, or global scans) or large scale processes, try to be as specific as possible with your searches. Think about using &#39;negative logic&#39; vs &#39;positive logic&#39; - &quot;Find me all the items outside my target set&quot; vs &quot;Look at each item in the set and ensure it has these properties&quot;.</p><p>This &#39;find the outsiders&#39; vs &#39;check everyone at the door&#39; approach can really speed things along. Again, keep your data set as small as possible, don&#39;t inspect more than the requirements require!</p></div>`,11);function z(J,K){const l=c("ExternalLinkIcon"),i=c("CodeTabs");return p(),d("div",null,[b,h,k,e("p",null,[s("The InSpec testing framework is itself built on "),e("a",v,[s("RSpec"),o(l)]),s(", a unit testing module for Ruby. InSpec extended rspec by including features like the resources library and more user-friendly syntax for writing tests, but we can still write our tests using RSpec syntax and they will work just fine.")]),g,o(i,{id:"31",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[w]),tab1:n(({value:a,isActive:t})=>[x]),_:1}),f,y,_,e("p",null,[s("If we would like to have a more detailed and cleaner feedback to our user, we can override the standard title of our describe block with a specific message that describes the intent of the test and use the "),e("a",A,[s("Explicit Subject"),o(l)]),s(' to tell inspec what the "subject" is for the test, then, we could refactor the code like this:')]),o(i,{id:"56",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[S]),tab1:n(({value:a,isActive:t})=>[I]),_:1}),O,o(i,{id:"84",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[C]),tab1:n(({value:a,isActive:t})=>[q]),_:1}),T,o(i,{id:"95",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[N]),tab1:n(({value:a,isActive:t})=>[R]),_:1}),j,W,o(i,{id:"109",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[L]),tab1:n(({value:a,isActive:t})=>[E]),_:1}),H,e("p",null,[s("Reference: "),e("a",F,[s("https://docs.chef.io/inspec/profiles/"),o(l)])]),B,U,V,o(i,{id:"134",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[$]),tab1:n(({value:a,isActive:t})=>[M]),_:1}),D,G,o(i,{id:"148",data:[{id:"Code"},{id:"Output"}]},{title0:n(({value:a,isActive:t})=>[s("Code")]),title1:n(({value:a,isActive:t})=>[s("Output")]),tab0:n(({value:a,isActive:t})=>[P]),tab1:n(({value:a,isActive:t})=>[X]),_:1}),Y])}const ee=u(m,[["render",z],["__file","07.html.vue"]]);export{ee as default};
